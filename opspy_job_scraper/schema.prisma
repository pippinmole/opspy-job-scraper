generator client {
  provider             = "prisma-client-py"
  output               = "./prisma"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Company {
  id            String         @id
  name          String
  description   String?
  logoUrl       String?
  website       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  ownerId       String?        @unique
  isVerified    Boolean        @default(false)
  employeeCount EmployeeCount?
  phone         String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  country       String?
  state         String?
  zipCode       String?
  User          User?          @relation(fields: [ownerId], references: [id])
  JobPost       JobPost[]
}

model JobApplication {
  id              String            @id
  userId          String
  jobId           String
  status          ApplicationStatus @default(APPLIED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  rejectionReason String?
  JobPost         JobPost           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [userId], references: [id])
}

model JobPost {
  id             String           @id
  title          String
  description    String?
  location       String?
  minSalary      Float
  maxSalary      Float
  currency       Currency
  type           JobType
  isQuickApply   Boolean          @default(false)
  externalLink   String?
  workMode       WorkMode         @default(ONSITE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  companyId      String
  status         JobStatus        @default(ACTIVE)
  expiresAt      DateTime?
  interval       PayInterval      @default(YEARLY)
  JobApplication JobApplication[]
  Company        Company          @relation(fields: [companyId], references: [id])
  JobTracker     JobTracker[]
  Tag            Tag[]            @relation("JobPostToTag")
}

model JobTracker {
  id        Int      @id @default(autoincrement())
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  JobPost   JobPost  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  JobPost JobPost[] @relation("JobPostToTag")
}

model UploadedCv {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  fileName     String
  friendlyName String   @default("CV")
  User         User     @relation(fields: [userId], references: [id])
}

model User {
  id                        String           @id @unique
  firstName                 String?
  lastName                  String?
  dateOfBirth               DateTime?
  bio                       String?
  email                     String?          @unique
  location                  String?
  createdAt                 DateTime         @default(now())
  githubLink                String?
  linkedinLink              String?
  twitterLink               String?
  bioCompletions            Int              @default(0)
  lastBioReset              DateTime?        @default(now())
  stripe_current_period_end DateTime?
  stripe_customer_id        String?          @unique
  stripe_price_id           String?
  stripe_subscription_id    String?          @unique
  isSuperUser               Boolean          @default(false)
  emailVerified             DateTime?
  image                     String?
  name                      String?
  isOnboard                 Boolean          @default(false)
  portfolioLink             String?
  Account                   Account[]
  Company                   Company?
  JobApplication            JobApplication[]
  JobTracker                JobTracker[]
  Session                   Session[]
  UploadedCv                UploadedCv?
  WorkExperience            WorkExperience[]
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User      @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ApplicationStatus {
  APPLIED
  MATCHED
  REJECTED
  OFFERED
  ACCEPTED
}

enum Currency {
  USD
  EUR
  GBP
  INR
}

enum JobStatus {
  ACTIVE
  INACTIVE
  IN_REVIEW
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

enum EmployeeCount {
  ONE_TO_TEN
  ELEVEN_TO_FIFTY
  FIFTY_ONE_TO_TWO_HUNDRED
  TWO_HUNDRED_AND_ONE_TO_FIVE_HUNDRED
  FIVE_HUNDRED_AND_ONE_TO_ONE_THOUSAND
  ONE_THOUSAND_AND_ONE_TO_FIVE_THOUSAND
  FIVE_THOUSAND_AND_ONE_TO_TEN_THOUSAND
  TEN_THOUSAND_AND_ONE_PLUS
}

enum PayInterval {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

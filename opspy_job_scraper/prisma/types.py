# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _ApplicationStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ApplicationStatus']]


class _ApplicationStatusListFilterHasInput(TypedDict):
    has: 'enums.ApplicationStatus'


class _ApplicationStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ApplicationStatus']


class _ApplicationStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ApplicationStatus']


class _ApplicationStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ApplicationStatusListFilter = Union[
    _ApplicationStatusListFilterHasInput,
    _ApplicationStatusListFilterEqualsInput,
    _ApplicationStatusListFilterHasSomeInput,
    _ApplicationStatusListFilterIsEmptyInput,
    _ApplicationStatusListFilterHasEveryInput,
]


class _ApplicationStatusListUpdateSet(TypedDict):
    set: List['enums.ApplicationStatus']


class _ApplicationStatusListUpdatePush(TypedDict):
    push: List['enums.ApplicationStatus']


ApplicationStatusListUpdate = Union[
    List['enums.ApplicationStatus'],
    _ApplicationStatusListUpdateSet,
    _ApplicationStatusListUpdatePush,
]

class _CurrencyListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Currency']]


class _CurrencyListFilterHasInput(TypedDict):
    has: 'enums.Currency'


class _CurrencyListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Currency']


class _CurrencyListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Currency']


class _CurrencyListFilterIsEmptyInput(TypedDict):
    is_empty: bool


CurrencyListFilter = Union[
    _CurrencyListFilterHasInput,
    _CurrencyListFilterEqualsInput,
    _CurrencyListFilterHasSomeInput,
    _CurrencyListFilterIsEmptyInput,
    _CurrencyListFilterHasEveryInput,
]


class _CurrencyListUpdateSet(TypedDict):
    set: List['enums.Currency']


class _CurrencyListUpdatePush(TypedDict):
    push: List['enums.Currency']


CurrencyListUpdate = Union[
    List['enums.Currency'],
    _CurrencyListUpdateSet,
    _CurrencyListUpdatePush,
]

class _JobStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.JobStatus']]


class _JobStatusListFilterHasInput(TypedDict):
    has: 'enums.JobStatus'


class _JobStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.JobStatus']


class _JobStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.JobStatus']


class _JobStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JobStatusListFilter = Union[
    _JobStatusListFilterHasInput,
    _JobStatusListFilterEqualsInput,
    _JobStatusListFilterHasSomeInput,
    _JobStatusListFilterIsEmptyInput,
    _JobStatusListFilterHasEveryInput,
]


class _JobStatusListUpdateSet(TypedDict):
    set: List['enums.JobStatus']


class _JobStatusListUpdatePush(TypedDict):
    push: List['enums.JobStatus']


JobStatusListUpdate = Union[
    List['enums.JobStatus'],
    _JobStatusListUpdateSet,
    _JobStatusListUpdatePush,
]

class _JobTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.JobType']]


class _JobTypeListFilterHasInput(TypedDict):
    has: 'enums.JobType'


class _JobTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.JobType']


class _JobTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.JobType']


class _JobTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JobTypeListFilter = Union[
    _JobTypeListFilterHasInput,
    _JobTypeListFilterEqualsInput,
    _JobTypeListFilterHasSomeInput,
    _JobTypeListFilterIsEmptyInput,
    _JobTypeListFilterHasEveryInput,
]


class _JobTypeListUpdateSet(TypedDict):
    set: List['enums.JobType']


class _JobTypeListUpdatePush(TypedDict):
    push: List['enums.JobType']


JobTypeListUpdate = Union[
    List['enums.JobType'],
    _JobTypeListUpdateSet,
    _JobTypeListUpdatePush,
]

class _WorkModeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.WorkMode']]


class _WorkModeListFilterHasInput(TypedDict):
    has: 'enums.WorkMode'


class _WorkModeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.WorkMode']


class _WorkModeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.WorkMode']


class _WorkModeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


WorkModeListFilter = Union[
    _WorkModeListFilterHasInput,
    _WorkModeListFilterEqualsInput,
    _WorkModeListFilterHasSomeInput,
    _WorkModeListFilterIsEmptyInput,
    _WorkModeListFilterHasEveryInput,
]


class _WorkModeListUpdateSet(TypedDict):
    set: List['enums.WorkMode']


class _WorkModeListUpdatePush(TypedDict):
    push: List['enums.WorkMode']


WorkModeListUpdate = Union[
    List['enums.WorkMode'],
    _WorkModeListUpdateSet,
    _WorkModeListUpdatePush,
]

class _EmployeeCountListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.EmployeeCount']]


class _EmployeeCountListFilterHasInput(TypedDict):
    has: 'enums.EmployeeCount'


class _EmployeeCountListFilterHasEveryInput(TypedDict):
    has_every: List['enums.EmployeeCount']


class _EmployeeCountListFilterHasSomeInput(TypedDict):
    has_some: List['enums.EmployeeCount']


class _EmployeeCountListFilterIsEmptyInput(TypedDict):
    is_empty: bool


EmployeeCountListFilter = Union[
    _EmployeeCountListFilterHasInput,
    _EmployeeCountListFilterEqualsInput,
    _EmployeeCountListFilterHasSomeInput,
    _EmployeeCountListFilterIsEmptyInput,
    _EmployeeCountListFilterHasEveryInput,
]


class _EmployeeCountListUpdateSet(TypedDict):
    set: List['enums.EmployeeCount']


class _EmployeeCountListUpdatePush(TypedDict):
    push: List['enums.EmployeeCount']


EmployeeCountListUpdate = Union[
    List['enums.EmployeeCount'],
    _EmployeeCountListUpdateSet,
    _EmployeeCountListUpdatePush,
]

class _PayIntervalListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.PayInterval']]


class _PayIntervalListFilterHasInput(TypedDict):
    has: 'enums.PayInterval'


class _PayIntervalListFilterHasEveryInput(TypedDict):
    has_every: List['enums.PayInterval']


class _PayIntervalListFilterHasSomeInput(TypedDict):
    has_some: List['enums.PayInterval']


class _PayIntervalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PayIntervalListFilter = Union[
    _PayIntervalListFilterHasInput,
    _PayIntervalListFilterEqualsInput,
    _PayIntervalListFilterHasSomeInput,
    _PayIntervalListFilterIsEmptyInput,
    _PayIntervalListFilterHasEveryInput,
]


class _PayIntervalListUpdateSet(TypedDict):
    set: List['enums.PayInterval']


class _PayIntervalListUpdatePush(TypedDict):
    push: List['enums.PayInterval']


PayIntervalListUpdate = Union[
    List['enums.PayInterval'],
    _PayIntervalListUpdateSet,
    _PayIntervalListUpdatePush,
]


# Company types

class CompanyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Company create method"""
    description: Optional[_str]
    logoUrl: Optional[_str]
    website: Optional[_str]
    createdAt: datetime.datetime
    ownerId: Optional[_str]
    isVerified: _bool
    employeeCount: Optional['enums.EmployeeCount']
    phone: Optional[_str]
    addressLine1: Optional[_str]
    addressLine2: Optional[_str]
    city: Optional[_str]
    country: Optional[_str]
    state: Optional[_str]
    zipCode: Optional[_str]
    User: 'UserCreateNestedWithoutRelationsInput'
    JobPost: 'JobPostCreateManyNestedWithoutRelationsInput'


class CompanyCreateInput(CompanyOptionalCreateInput):
    """Required arguments to the Company create method"""
    id: _str
    name: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CompanyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Company create method, without relations"""
    description: Optional[_str]
    logoUrl: Optional[_str]
    website: Optional[_str]
    createdAt: datetime.datetime
    ownerId: Optional[_str]
    isVerified: _bool
    employeeCount: Optional['enums.EmployeeCount']
    phone: Optional[_str]
    addressLine1: Optional[_str]
    addressLine2: Optional[_str]
    city: Optional[_str]
    country: Optional[_str]
    state: Optional[_str]
    zipCode: Optional[_str]


class CompanyCreateWithoutRelationsInput(CompanyOptionalCreateWithoutRelationsInput):
    """Required arguments to the Company create method, without relations"""
    id: _str
    name: _str
    updatedAt: datetime.datetime


class CompanyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'


class CompanyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CompanyCreateWithoutRelationsInput', List['CompanyCreateWithoutRelationsInput']]
    connect: Union['CompanyWhereUniqueInput', List['CompanyWhereUniqueInput']]


_CompanyWhereUnique_id_Input = TypedDict(
    '_CompanyWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CompanyWhereUnique_ownerId_Input = TypedDict(
    '_CompanyWhereUnique_ownerId_Input',
    {
        'ownerId': '_str',
    },
    total=True
)

CompanyWhereUniqueInput = Union[
    '_CompanyWhereUnique_id_Input',
    '_CompanyWhereUnique_ownerId_Input',
]


class CompanyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    logoUrl: Optional[_str]
    website: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    isVerified: _bool
    employeeCount: Optional['enums.EmployeeCount']
    phone: Optional[_str]
    addressLine1: Optional[_str]
    addressLine2: Optional[_str]
    city: Optional[_str]
    country: Optional[_str]
    state: Optional[_str]
    zipCode: Optional[_str]
    User: 'UserUpdateOneWithoutRelationsInput'
    JobPost: 'JobPostUpdateManyWithoutRelationsInput'


class CompanyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    logoUrl: Optional[_str]
    website: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    isVerified: _bool
    employeeCount: Optional['enums.EmployeeCount']
    phone: Optional[_str]
    addressLine1: Optional[_str]
    addressLine2: Optional[_str]
    city: Optional[_str]
    country: Optional[_str]
    state: Optional[_str]
    zipCode: Optional[_str]


class CompanyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CompanyCreateWithoutRelationsInput']
    connect: List['CompanyWhereUniqueInput']
    set: List['CompanyWhereUniqueInput']
    disconnect: List['CompanyWhereUniqueInput']
    delete: List['CompanyWhereUniqueInput']

    # TODO
    # update: List['CompanyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CompanyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CompanyScalarWhereInput']
    # upsert: List['CompanyUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CompanyCreateOrConnectWithoutRelationsInput']


class CompanyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CompanyUpdateInput'
    # upsert: 'CompanyUpsertWithoutRelationsInput'
    # connectOrCreate: 'CompanyCreateOrConnectWithoutRelationsInput'


class CompanyUpsertInput(TypedDict):
    create: 'CompanyCreateInput'
    update: 'CompanyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Company_id_OrderByInput = TypedDict(
    '_Company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Company_name_OrderByInput = TypedDict(
    '_Company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Company_description_OrderByInput = TypedDict(
    '_Company_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Company_logoUrl_OrderByInput = TypedDict(
    '_Company_logoUrl_OrderByInput',
    {
        'logoUrl': 'SortOrder',
    },
    total=True
)

_Company_website_OrderByInput = TypedDict(
    '_Company_website_OrderByInput',
    {
        'website': 'SortOrder',
    },
    total=True
)

_Company_createdAt_OrderByInput = TypedDict(
    '_Company_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Company_updatedAt_OrderByInput = TypedDict(
    '_Company_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Company_ownerId_OrderByInput = TypedDict(
    '_Company_ownerId_OrderByInput',
    {
        'ownerId': 'SortOrder',
    },
    total=True
)

_Company_isVerified_OrderByInput = TypedDict(
    '_Company_isVerified_OrderByInput',
    {
        'isVerified': 'SortOrder',
    },
    total=True
)

_Company_employeeCount_OrderByInput = TypedDict(
    '_Company_employeeCount_OrderByInput',
    {
        'employeeCount': 'SortOrder',
    },
    total=True
)

_Company_phone_OrderByInput = TypedDict(
    '_Company_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Company_addressLine1_OrderByInput = TypedDict(
    '_Company_addressLine1_OrderByInput',
    {
        'addressLine1': 'SortOrder',
    },
    total=True
)

_Company_addressLine2_OrderByInput = TypedDict(
    '_Company_addressLine2_OrderByInput',
    {
        'addressLine2': 'SortOrder',
    },
    total=True
)

_Company_city_OrderByInput = TypedDict(
    '_Company_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Company_country_OrderByInput = TypedDict(
    '_Company_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Company_state_OrderByInput = TypedDict(
    '_Company_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Company_zipCode_OrderByInput = TypedDict(
    '_Company_zipCode_OrderByInput',
    {
        'zipCode': 'SortOrder',
    },
    total=True
)

CompanyOrderByInput = Union[
    '_Company_id_OrderByInput',
    '_Company_name_OrderByInput',
    '_Company_description_OrderByInput',
    '_Company_logoUrl_OrderByInput',
    '_Company_website_OrderByInput',
    '_Company_createdAt_OrderByInput',
    '_Company_updatedAt_OrderByInput',
    '_Company_ownerId_OrderByInput',
    '_Company_isVerified_OrderByInput',
    '_Company_employeeCount_OrderByInput',
    '_Company_phone_OrderByInput',
    '_Company_addressLine1_OrderByInput',
    '_Company_addressLine2_OrderByInput',
    '_Company_city_OrderByInput',
    '_Company_country_OrderByInput',
    '_Company_state_OrderByInput',
    '_Company_zipCode_OrderByInput',
]



# recursive Company types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CompanyRelationFilter = TypedDict(
    'CompanyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CompanyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CompanyInclude(TypedDict, total=False):
    """Company relational arguments"""
    User: Union[bool, 'UserArgsFromCompany']
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompany']


    

class CompanyIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive1']


class CompanyIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive2']


class CompanyIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive3']


class CompanyIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive4']


class CompanyIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive1']
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class JobApplicationIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive2']
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class JobApplicationIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive3']
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class JobApplicationIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive4']
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class JobApplicationIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class JobApplicationArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyJobApplicationArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive1']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromCompanyRecursive1']


class JobPostIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive2']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromCompanyRecursive2']


class JobPostIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive3']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromCompanyRecursive3']


class JobPostIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive4']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromCompanyRecursive4']


class JobPostIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class JobPostArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyJobPostArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive1']
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class JobTrackerIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive2']
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class JobTrackerIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive3']
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class JobTrackerIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'JobPostArgsFromCompanyRecursive4']
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class JobTrackerIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class JobTrackerArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyJobTrackerArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive1']


class TagIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive2']


class TagIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive3']


class TagIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromCompanyRecursive4']


class TagIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class TagArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyTagArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class UploadedCvIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class UploadedCvIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class UploadedCvIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class UploadedCvIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class UploadedCvArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyUploadedCvArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    Account: Union[bool, 'FindManyAccountArgsFromCompanyRecursive1']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromCompanyRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromCompanyRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromCompanyRecursive1']


class UserIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    Account: Union[bool, 'FindManyAccountArgsFromCompanyRecursive2']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromCompanyRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromCompanyRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromCompanyRecursive2']


class UserIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    Account: Union[bool, 'FindManyAccountArgsFromCompanyRecursive3']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromCompanyRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromCompanyRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromCompanyRecursive3']


class UserIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    Account: Union[bool, 'FindManyAccountArgsFromCompanyRecursive4']
    Company: Union[bool, 'CompanyArgsFromCompanyRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromCompanyRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromCompanyRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromCompanyRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromCompanyRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromCompanyRecursive4']


class UserIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class UserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyUserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class WorkExperienceIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class WorkExperienceIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class WorkExperienceIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class WorkExperienceIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class WorkExperienceArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyWorkExperienceArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class AccountIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class AccountIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class AccountIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class AccountIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class AccountArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyAccountArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive1']


class SessionIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive2']


class SessionIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive3']


class SessionIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    User: Union[bool, 'UserArgsFromCompanyRecursive4']


class SessionIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class SessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManySessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class VerificationTokenIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class VerificationTokenIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class VerificationTokenIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class VerificationTokenIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class VerificationTokenArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyVerificationTokenArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyCompanyArgs = FindManyCompanyArgsFromCompany
FindFirstCompanyArgs = FindManyCompanyArgsFromCompany


    

class CompanyWhereInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    logoUrl: Union[None, _str, 'types.StringFilter']
    website: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    ownerId: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[None, _str, 'types.StringFilter']
    addressLine1: Union[None, _str, 'types.StringFilter']
    addressLine2: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive1', List['CompanyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive1']
    OR: List['CompanyWhereInputRecursive1']
    NOT: List['CompanyWhereInputRecursive1']


class CompanyWhereInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    logoUrl: Union[None, _str, 'types.StringFilter']
    website: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    ownerId: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[None, _str, 'types.StringFilter']
    addressLine1: Union[None, _str, 'types.StringFilter']
    addressLine2: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive2', List['CompanyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive2']
    OR: List['CompanyWhereInputRecursive2']
    NOT: List['CompanyWhereInputRecursive2']


class CompanyWhereInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    logoUrl: Union[None, _str, 'types.StringFilter']
    website: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    ownerId: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[None, _str, 'types.StringFilter']
    addressLine1: Union[None, _str, 'types.StringFilter']
    addressLine2: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive3', List['CompanyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive3']
    OR: List['CompanyWhereInputRecursive3']
    NOT: List['CompanyWhereInputRecursive3']


class CompanyWhereInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    logoUrl: Union[None, _str, 'types.StringFilter']
    website: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    ownerId: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[None, _str, 'types.StringFilter']
    addressLine1: Union[None, _str, 'types.StringFilter']
    addressLine2: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive4', List['CompanyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive4']
    OR: List['CompanyWhereInputRecursive4']
    NOT: List['CompanyWhereInputRecursive4']


class CompanyWhereInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    logoUrl: Union[None, _str, 'types.StringFilter']
    website: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    ownerId: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[None, _str, 'types.StringFilter']
    addressLine1: Union[None, _str, 'types.StringFilter']
    addressLine2: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'
    JobPost: 'JobPostListRelationFilter'



# aggregate Company types


    

class CompanyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    logoUrl: Union[_str, 'types.StringWithAggregatesFilter']
    website: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine1: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine2: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive1']


class CompanyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    logoUrl: Union[_str, 'types.StringWithAggregatesFilter']
    website: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine1: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine2: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive2']


class CompanyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    logoUrl: Union[_str, 'types.StringWithAggregatesFilter']
    website: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine1: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine2: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive3']


class CompanyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    logoUrl: Union[_str, 'types.StringWithAggregatesFilter']
    website: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine1: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine2: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive4']


class CompanyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    logoUrl: Union[_str, 'types.StringWithAggregatesFilter']
    website: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    employeeCount: 'enums.EmployeeCount'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine1: Union[_str, 'types.StringWithAggregatesFilter']
    addressLine2: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']



class CompanyGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    logoUrl: _str
    website: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    ownerId: _str
    isVerified: _bool
    employeeCount: 'enums.EmployeeCount'
    phone: _str
    addressLine1: _str
    addressLine2: _str
    city: _str
    country: _str
    state: _str
    zipCode: _str
    _sum: 'CompanySumAggregateOutput'
    _avg: 'CompanyAvgAggregateOutput'
    _min: 'CompanyMinAggregateOutput'
    _max: 'CompanyMaxAggregateOutput'
    _count: 'CompanyCountAggregateOutput'


class CompanyAvgAggregateOutput(TypedDict, total=False):
    """Company output for aggregating averages"""


class CompanySumAggregateOutput(TypedDict, total=False):
    """Company output for aggregating sums"""


class CompanyScalarAggregateOutput(TypedDict, total=False):
    """Company output including scalar fields"""
    id: _str
    name: _str
    description: _str
    logoUrl: _str
    website: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    ownerId: _str
    isVerified: _bool
    employeeCount: 'enums.EmployeeCount'
    phone: _str
    addressLine1: _str
    addressLine2: _str
    city: _str
    country: _str
    state: _str
    zipCode: _str


CompanyMinAggregateOutput = CompanyScalarAggregateOutput
CompanyMaxAggregateOutput = CompanyScalarAggregateOutput


class CompanyMaxAggregateInput(TypedDict, total=False):
    """Company input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    logoUrl: bool
    website: bool
    createdAt: bool
    updatedAt: bool
    ownerId: bool
    isVerified: bool
    employeeCount: bool
    phone: bool
    addressLine1: bool
    addressLine2: bool
    city: bool
    country: bool
    state: bool
    zipCode: bool


class CompanyMinAggregateInput(TypedDict, total=False):
    """Company input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    logoUrl: bool
    website: bool
    createdAt: bool
    updatedAt: bool
    ownerId: bool
    isVerified: bool
    employeeCount: bool
    phone: bool
    addressLine1: bool
    addressLine2: bool
    city: bool
    country: bool
    state: bool
    zipCode: bool


class CompanyNumberAggregateInput(TypedDict, total=False):
    """Company input for aggregating numbers"""


CompanyAvgAggregateInput = CompanyNumberAggregateInput
CompanySumAggregateInput = CompanyNumberAggregateInput


CompanyCountAggregateInput = TypedDict(
    'CompanyCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'logoUrl': bool,
        'website': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'ownerId': bool,
        'isVerified': bool,
        'employeeCount': bool,
        'phone': bool,
        'addressLine1': bool,
        'addressLine2': bool,
        'city': bool,
        'country': bool,
        'state': bool,
        'zipCode': bool,
        '_all': bool,
    },
    total=False,
)

CompanyCountAggregateOutput = TypedDict(
    'CompanyCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'logoUrl': int,
        'website': int,
        'createdAt': int,
        'updatedAt': int,
        'ownerId': int,
        'isVerified': int,
        'employeeCount': int,
        'phone': int,
        'addressLine1': int,
        'addressLine2': int,
        'city': int,
        'country': int,
        'state': int,
        'zipCode': int,
        '_all': int,
    },
    total=False,
)


CompanyKeys = Literal[
    'id',
    'name',
    'description',
    'logoUrl',
    'website',
    'createdAt',
    'updatedAt',
    'ownerId',
    'isVerified',
    'employeeCount',
    'phone',
    'addressLine1',
    'addressLine2',
    'city',
    'country',
    'state',
    'zipCode',
    'User',
    'JobPost',
]
CompanyScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'logoUrl',
    'website',
    'createdAt',
    'updatedAt',
    'ownerId',
    'isVerified',
    'employeeCount',
    'phone',
    'addressLine1',
    'addressLine2',
    'city',
    'country',
    'state',
    'zipCode',
]
CompanyScalarFieldKeysT = TypeVar('CompanyScalarFieldKeysT', bound=CompanyScalarFieldKeys)

CompanyRelationalFieldKeys = Literal[
        'User',
        'JobPost',
    ]

# JobApplication types

class JobApplicationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the JobApplication create method"""
    userId: _str
    jobId: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    rejectionReason: Optional[_str]
    JobPost: 'JobPostCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class JobApplicationCreateInput(JobApplicationOptionalCreateInput):
    """Required arguments to the JobApplication create method"""
    id: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class JobApplicationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the JobApplication create method, without relations"""
    userId: _str
    jobId: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    rejectionReason: Optional[_str]


class JobApplicationCreateWithoutRelationsInput(JobApplicationOptionalCreateWithoutRelationsInput):
    """Required arguments to the JobApplication create method, without relations"""
    id: _str
    updatedAt: datetime.datetime


class JobApplicationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'JobApplicationCreateWithoutRelationsInput'
    connect: 'JobApplicationWhereUniqueInput'


class JobApplicationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['JobApplicationCreateWithoutRelationsInput', List['JobApplicationCreateWithoutRelationsInput']]
    connect: Union['JobApplicationWhereUniqueInput', List['JobApplicationWhereUniqueInput']]


_JobApplicationWhereUnique_id_Input = TypedDict(
    '_JobApplicationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

JobApplicationWhereUniqueInput = _JobApplicationWhereUnique_id_Input


class JobApplicationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    rejectionReason: Optional[_str]
    JobPost: 'JobPostUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class JobApplicationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    rejectionReason: Optional[_str]


class JobApplicationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['JobApplicationCreateWithoutRelationsInput']
    connect: List['JobApplicationWhereUniqueInput']
    set: List['JobApplicationWhereUniqueInput']
    disconnect: List['JobApplicationWhereUniqueInput']
    delete: List['JobApplicationWhereUniqueInput']

    # TODO
    # update: List['JobApplicationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['JobApplicationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['JobApplicationScalarWhereInput']
    # upsert: List['JobApplicationUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['JobApplicationCreateOrConnectWithoutRelationsInput']


class JobApplicationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'JobApplicationCreateWithoutRelationsInput'
    connect: 'JobApplicationWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'JobApplicationUpdateInput'
    # upsert: 'JobApplicationUpsertWithoutRelationsInput'
    # connectOrCreate: 'JobApplicationCreateOrConnectWithoutRelationsInput'


class JobApplicationUpsertInput(TypedDict):
    create: 'JobApplicationCreateInput'
    update: 'JobApplicationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_JobApplication_id_OrderByInput = TypedDict(
    '_JobApplication_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_JobApplication_userId_OrderByInput = TypedDict(
    '_JobApplication_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_JobApplication_jobId_OrderByInput = TypedDict(
    '_JobApplication_jobId_OrderByInput',
    {
        'jobId': 'SortOrder',
    },
    total=True
)

_JobApplication_status_OrderByInput = TypedDict(
    '_JobApplication_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_JobApplication_createdAt_OrderByInput = TypedDict(
    '_JobApplication_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_JobApplication_updatedAt_OrderByInput = TypedDict(
    '_JobApplication_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_JobApplication_rejectionReason_OrderByInput = TypedDict(
    '_JobApplication_rejectionReason_OrderByInput',
    {
        'rejectionReason': 'SortOrder',
    },
    total=True
)

JobApplicationOrderByInput = Union[
    '_JobApplication_id_OrderByInput',
    '_JobApplication_userId_OrderByInput',
    '_JobApplication_jobId_OrderByInput',
    '_JobApplication_status_OrderByInput',
    '_JobApplication_createdAt_OrderByInput',
    '_JobApplication_updatedAt_OrderByInput',
    '_JobApplication_rejectionReason_OrderByInput',
]



# recursive JobApplication types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

JobApplicationRelationFilter = TypedDict(
    'JobApplicationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class JobApplicationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class JobApplicationInclude(TypedDict, total=False):
    """JobApplication relational arguments"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplication']
    User: Union[bool, 'UserArgsFromJobApplication']


    

class CompanyIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive1']


class CompanyIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive2']


class CompanyIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive3']


class CompanyIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive4']


class CompanyIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class CompanyArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyCompanyArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive1']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class JobApplicationIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive2']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class JobApplicationIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive3']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class JobApplicationIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive4']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class JobApplicationIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class JobApplicationArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyJobApplicationArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromJobApplicationRecursive1']


class JobPostIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromJobApplicationRecursive2']


class JobPostIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromJobApplicationRecursive3']


class JobPostIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromJobApplicationRecursive4']


class JobPostIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class JobPostArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyJobPostArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive1']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class JobTrackerIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive2']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class JobTrackerIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive3']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class JobTrackerIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'JobPostArgsFromJobApplicationRecursive4']
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class JobTrackerIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class JobTrackerArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyJobTrackerArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive1']


class TagIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive2']


class TagIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive3']


class TagIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobApplicationRecursive4']


class TagIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class TagArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyTagArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class UploadedCvIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class UploadedCvIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class UploadedCvIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class UploadedCvIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class UploadedCvArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyUploadedCvArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    Account: Union[bool, 'FindManyAccountArgsFromJobApplicationRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromJobApplicationRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobApplicationRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobApplicationRecursive1']


class UserIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    Account: Union[bool, 'FindManyAccountArgsFromJobApplicationRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromJobApplicationRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobApplicationRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobApplicationRecursive2']


class UserIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    Account: Union[bool, 'FindManyAccountArgsFromJobApplicationRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromJobApplicationRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobApplicationRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobApplicationRecursive3']


class UserIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    Account: Union[bool, 'FindManyAccountArgsFromJobApplicationRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobApplicationRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobApplicationRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobApplicationRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromJobApplicationRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobApplicationRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobApplicationRecursive4']


class UserIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class UserArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyUserArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class WorkExperienceIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class WorkExperienceIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class WorkExperienceIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class WorkExperienceIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class WorkExperienceArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyWorkExperienceArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class AccountIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class AccountIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class AccountIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class AccountIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class AccountArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyAccountArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive1']


class SessionIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive2']


class SessionIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive3']


class SessionIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""
    User: Union[bool, 'UserArgsFromJobApplicationRecursive4']


class SessionIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class SessionArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManySessionArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromJobApplication(TypedDict, total=False):
    """Relational arguments for JobApplication"""


class VerificationTokenIncludeFromJobApplicationRecursive1(TypedDict, total=False):
    """Relational arguments for JobApplication"""


class VerificationTokenIncludeFromJobApplicationRecursive2(TypedDict, total=False):
    """Relational arguments for JobApplication"""


class VerificationTokenIncludeFromJobApplicationRecursive3(TypedDict, total=False):
    """Relational arguments for JobApplication"""


class VerificationTokenIncludeFromJobApplicationRecursive4(TypedDict, total=False):
    """Relational arguments for JobApplication"""

    

class VerificationTokenArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    
    

class FindManyVerificationTokenArgsFromJobApplication(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromJobApplicationRecursive1(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromJobApplicationRecursive2(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromJobApplicationRecursive3(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromJobApplicationRecursive4(TypedDict, total=False):
    """Arguments for JobApplication"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyJobApplicationArgs = FindManyJobApplicationArgsFromJobApplication
FindFirstJobApplicationArgs = FindManyJobApplicationArgsFromJobApplication


    

class JobApplicationWhereInput(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    jobId: Union[_str, 'types.StringFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    rejectionReason: Union[None, _str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobApplicationWhereInputRecursive1', List['JobApplicationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['JobApplicationWhereInputRecursive1']
    OR: List['JobApplicationWhereInputRecursive1']
    NOT: List['JobApplicationWhereInputRecursive1']


class JobApplicationWhereInputRecursive1(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    jobId: Union[_str, 'types.StringFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    rejectionReason: Union[None, _str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobApplicationWhereInputRecursive2', List['JobApplicationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['JobApplicationWhereInputRecursive2']
    OR: List['JobApplicationWhereInputRecursive2']
    NOT: List['JobApplicationWhereInputRecursive2']


class JobApplicationWhereInputRecursive2(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    jobId: Union[_str, 'types.StringFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    rejectionReason: Union[None, _str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobApplicationWhereInputRecursive3', List['JobApplicationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['JobApplicationWhereInputRecursive3']
    OR: List['JobApplicationWhereInputRecursive3']
    NOT: List['JobApplicationWhereInputRecursive3']


class JobApplicationWhereInputRecursive3(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    jobId: Union[_str, 'types.StringFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    rejectionReason: Union[None, _str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobApplicationWhereInputRecursive4', List['JobApplicationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['JobApplicationWhereInputRecursive4']
    OR: List['JobApplicationWhereInputRecursive4']
    NOT: List['JobApplicationWhereInputRecursive4']


class JobApplicationWhereInputRecursive4(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    jobId: Union[_str, 'types.StringFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    rejectionReason: Union[None, _str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'



# aggregate JobApplication types


    

class JobApplicationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    rejectionReason: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobApplicationScalarWhereWithAggregatesInputRecursive1']
    OR: List['JobApplicationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['JobApplicationScalarWhereWithAggregatesInputRecursive1']


class JobApplicationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    rejectionReason: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobApplicationScalarWhereWithAggregatesInputRecursive2']
    OR: List['JobApplicationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['JobApplicationScalarWhereWithAggregatesInputRecursive2']


class JobApplicationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    rejectionReason: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobApplicationScalarWhereWithAggregatesInputRecursive3']
    OR: List['JobApplicationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['JobApplicationScalarWhereWithAggregatesInputRecursive3']


class JobApplicationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    rejectionReason: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobApplicationScalarWhereWithAggregatesInputRecursive4']
    OR: List['JobApplicationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['JobApplicationScalarWhereWithAggregatesInputRecursive4']


class JobApplicationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """JobApplication arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ApplicationStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    rejectionReason: Union[_str, 'types.StringWithAggregatesFilter']



class JobApplicationGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    jobId: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    rejectionReason: _str
    _sum: 'JobApplicationSumAggregateOutput'
    _avg: 'JobApplicationAvgAggregateOutput'
    _min: 'JobApplicationMinAggregateOutput'
    _max: 'JobApplicationMaxAggregateOutput'
    _count: 'JobApplicationCountAggregateOutput'


class JobApplicationAvgAggregateOutput(TypedDict, total=False):
    """JobApplication output for aggregating averages"""


class JobApplicationSumAggregateOutput(TypedDict, total=False):
    """JobApplication output for aggregating sums"""


class JobApplicationScalarAggregateOutput(TypedDict, total=False):
    """JobApplication output including scalar fields"""
    id: _str
    userId: _str
    jobId: _str
    status: 'enums.ApplicationStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    rejectionReason: _str


JobApplicationMinAggregateOutput = JobApplicationScalarAggregateOutput
JobApplicationMaxAggregateOutput = JobApplicationScalarAggregateOutput


class JobApplicationMaxAggregateInput(TypedDict, total=False):
    """JobApplication input for aggregating by max"""
    id: bool
    userId: bool
    jobId: bool
    status: bool
    createdAt: bool
    updatedAt: bool
    rejectionReason: bool


class JobApplicationMinAggregateInput(TypedDict, total=False):
    """JobApplication input for aggregating by min"""
    id: bool
    userId: bool
    jobId: bool
    status: bool
    createdAt: bool
    updatedAt: bool
    rejectionReason: bool


class JobApplicationNumberAggregateInput(TypedDict, total=False):
    """JobApplication input for aggregating numbers"""


JobApplicationAvgAggregateInput = JobApplicationNumberAggregateInput
JobApplicationSumAggregateInput = JobApplicationNumberAggregateInput


JobApplicationCountAggregateInput = TypedDict(
    'JobApplicationCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'jobId': bool,
        'status': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'rejectionReason': bool,
        '_all': bool,
    },
    total=False,
)

JobApplicationCountAggregateOutput = TypedDict(
    'JobApplicationCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'jobId': int,
        'status': int,
        'createdAt': int,
        'updatedAt': int,
        'rejectionReason': int,
        '_all': int,
    },
    total=False,
)


JobApplicationKeys = Literal[
    'id',
    'userId',
    'jobId',
    'status',
    'createdAt',
    'updatedAt',
    'rejectionReason',
    'JobPost',
    'User',
]
JobApplicationScalarFieldKeys = Literal[
    'id',
    'userId',
    'jobId',
    'status',
    'createdAt',
    'updatedAt',
    'rejectionReason',
]
JobApplicationScalarFieldKeysT = TypeVar('JobApplicationScalarFieldKeysT', bound=JobApplicationScalarFieldKeys)

JobApplicationRelationalFieldKeys = Literal[
        'JobPost',
        'User',
    ]

# JobPost types

class JobPostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the JobPost create method"""
    description: Optional[_str]
    location: Optional[_str]
    isQuickApply: _bool
    externalLink: Optional[_str]
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    companyId: _str
    status: 'enums.JobStatus'
    expiresAt: Optional[datetime.datetime]
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationCreateManyNestedWithoutRelationsInput'
    Company: 'CompanyCreateNestedWithoutRelationsInput'
    JobTracker: 'JobTrackerCreateManyNestedWithoutRelationsInput'
    Tag: 'TagCreateManyNestedWithoutRelationsInput'


class JobPostCreateInput(JobPostOptionalCreateInput):
    """Required arguments to the JobPost create method"""
    id: _str
    title: _str
    minSalary: _float
    maxSalary: _float
    currency: 'enums.Currency'
    type: 'enums.JobType'
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class JobPostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the JobPost create method, without relations"""
    description: Optional[_str]
    location: Optional[_str]
    isQuickApply: _bool
    externalLink: Optional[_str]
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    companyId: _str
    status: 'enums.JobStatus'
    expiresAt: Optional[datetime.datetime]
    interval: 'enums.PayInterval'


class JobPostCreateWithoutRelationsInput(JobPostOptionalCreateWithoutRelationsInput):
    """Required arguments to the JobPost create method, without relations"""
    id: _str
    title: _str
    minSalary: _float
    maxSalary: _float
    currency: 'enums.Currency'
    type: 'enums.JobType'
    updatedAt: datetime.datetime


class JobPostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'JobPostCreateWithoutRelationsInput'
    connect: 'JobPostWhereUniqueInput'


class JobPostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['JobPostCreateWithoutRelationsInput', List['JobPostCreateWithoutRelationsInput']]
    connect: Union['JobPostWhereUniqueInput', List['JobPostWhereUniqueInput']]


_JobPostWhereUnique_id_Input = TypedDict(
    '_JobPostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

JobPostWhereUniqueInput = _JobPostWhereUnique_id_Input


class JobPostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    location: Optional[_str]
    minSalary: Union[AtomicFloatInput, _float]
    maxSalary: Union[AtomicFloatInput, _float]
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: _bool
    externalLink: Optional[_str]
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    status: 'enums.JobStatus'
    expiresAt: Optional[datetime.datetime]
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationUpdateManyWithoutRelationsInput'
    Company: 'CompanyUpdateOneWithoutRelationsInput'
    JobTracker: 'JobTrackerUpdateManyWithoutRelationsInput'
    Tag: 'TagUpdateManyWithoutRelationsInput'


class JobPostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    location: Optional[_str]
    minSalary: Union[AtomicFloatInput, _float]
    maxSalary: Union[AtomicFloatInput, _float]
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: _bool
    externalLink: Optional[_str]
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    status: 'enums.JobStatus'
    expiresAt: Optional[datetime.datetime]
    interval: 'enums.PayInterval'


class JobPostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['JobPostCreateWithoutRelationsInput']
    connect: List['JobPostWhereUniqueInput']
    set: List['JobPostWhereUniqueInput']
    disconnect: List['JobPostWhereUniqueInput']
    delete: List['JobPostWhereUniqueInput']

    # TODO
    # update: List['JobPostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['JobPostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['JobPostScalarWhereInput']
    # upsert: List['JobPostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['JobPostCreateOrConnectWithoutRelationsInput']


class JobPostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'JobPostCreateWithoutRelationsInput'
    connect: 'JobPostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'JobPostUpdateInput'
    # upsert: 'JobPostUpsertWithoutRelationsInput'
    # connectOrCreate: 'JobPostCreateOrConnectWithoutRelationsInput'


class JobPostUpsertInput(TypedDict):
    create: 'JobPostCreateInput'
    update: 'JobPostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_JobPost_id_OrderByInput = TypedDict(
    '_JobPost_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_JobPost_title_OrderByInput = TypedDict(
    '_JobPost_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_JobPost_description_OrderByInput = TypedDict(
    '_JobPost_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_JobPost_location_OrderByInput = TypedDict(
    '_JobPost_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_JobPost_minSalary_OrderByInput = TypedDict(
    '_JobPost_minSalary_OrderByInput',
    {
        'minSalary': 'SortOrder',
    },
    total=True
)

_JobPost_maxSalary_OrderByInput = TypedDict(
    '_JobPost_maxSalary_OrderByInput',
    {
        'maxSalary': 'SortOrder',
    },
    total=True
)

_JobPost_currency_OrderByInput = TypedDict(
    '_JobPost_currency_OrderByInput',
    {
        'currency': 'SortOrder',
    },
    total=True
)

_JobPost_type_OrderByInput = TypedDict(
    '_JobPost_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_JobPost_isQuickApply_OrderByInput = TypedDict(
    '_JobPost_isQuickApply_OrderByInput',
    {
        'isQuickApply': 'SortOrder',
    },
    total=True
)

_JobPost_externalLink_OrderByInput = TypedDict(
    '_JobPost_externalLink_OrderByInput',
    {
        'externalLink': 'SortOrder',
    },
    total=True
)

_JobPost_workMode_OrderByInput = TypedDict(
    '_JobPost_workMode_OrderByInput',
    {
        'workMode': 'SortOrder',
    },
    total=True
)

_JobPost_createdAt_OrderByInput = TypedDict(
    '_JobPost_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_JobPost_updatedAt_OrderByInput = TypedDict(
    '_JobPost_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_JobPost_companyId_OrderByInput = TypedDict(
    '_JobPost_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_JobPost_status_OrderByInput = TypedDict(
    '_JobPost_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_JobPost_expiresAt_OrderByInput = TypedDict(
    '_JobPost_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_JobPost_interval_OrderByInput = TypedDict(
    '_JobPost_interval_OrderByInput',
    {
        'interval': 'SortOrder',
    },
    total=True
)

JobPostOrderByInput = Union[
    '_JobPost_id_OrderByInput',
    '_JobPost_title_OrderByInput',
    '_JobPost_description_OrderByInput',
    '_JobPost_location_OrderByInput',
    '_JobPost_minSalary_OrderByInput',
    '_JobPost_maxSalary_OrderByInput',
    '_JobPost_currency_OrderByInput',
    '_JobPost_type_OrderByInput',
    '_JobPost_isQuickApply_OrderByInput',
    '_JobPost_externalLink_OrderByInput',
    '_JobPost_workMode_OrderByInput',
    '_JobPost_createdAt_OrderByInput',
    '_JobPost_updatedAt_OrderByInput',
    '_JobPost_companyId_OrderByInput',
    '_JobPost_status_OrderByInput',
    '_JobPost_expiresAt_OrderByInput',
    '_JobPost_interval_OrderByInput',
]



# recursive JobPost types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

JobPostRelationFilter = TypedDict(
    'JobPostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class JobPostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class JobPostInclude(TypedDict, total=False):
    """JobPost relational arguments"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPost']
    Company: Union[bool, 'CompanyArgsFromJobPost']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPost']
    Tag: Union[bool, 'FindManyTagArgsFromJobPost']


    

class CompanyIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive1']


class CompanyIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive2']


class CompanyIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive3']


class CompanyIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive4']


class CompanyIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class CompanyArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyCompanyArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive1']
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class JobApplicationIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive2']
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class JobApplicationIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive3']
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class JobApplicationIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive4']
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class JobApplicationIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class JobApplicationArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyJobApplicationArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromJobPostRecursive1']


class JobPostIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromJobPostRecursive2']


class JobPostIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromJobPostRecursive3']


class JobPostIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromJobPostRecursive4']


class JobPostIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class JobPostArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyJobPostArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive1']
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class JobTrackerIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive2']
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class JobTrackerIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive3']
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class JobTrackerIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'JobPostArgsFromJobPostRecursive4']
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class JobTrackerIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class JobTrackerArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyJobTrackerArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive1']


class TagIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive2']


class TagIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive3']


class TagIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobPostRecursive4']


class TagIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class TagArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyTagArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class UploadedCvIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class UploadedCvIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class UploadedCvIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class UploadedCvIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class UploadedCvArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyUploadedCvArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    Account: Union[bool, 'FindManyAccountArgsFromJobPostRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromJobPostRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobPostRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobPostRecursive1']


class UserIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    Account: Union[bool, 'FindManyAccountArgsFromJobPostRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromJobPostRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobPostRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobPostRecursive2']


class UserIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    Account: Union[bool, 'FindManyAccountArgsFromJobPostRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromJobPostRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobPostRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobPostRecursive3']


class UserIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    Account: Union[bool, 'FindManyAccountArgsFromJobPostRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobPostRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobPostRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobPostRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromJobPostRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobPostRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobPostRecursive4']


class UserIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class UserArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyUserArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class WorkExperienceIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class WorkExperienceIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class WorkExperienceIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class WorkExperienceIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class WorkExperienceArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyWorkExperienceArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class AccountIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class AccountIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class AccountIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class AccountIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class AccountArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyAccountArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive1']


class SessionIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive2']


class SessionIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive3']


class SessionIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""
    User: Union[bool, 'UserArgsFromJobPostRecursive4']


class SessionIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class SessionArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManySessionArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromJobPost(TypedDict, total=False):
    """Relational arguments for JobPost"""


class VerificationTokenIncludeFromJobPostRecursive1(TypedDict, total=False):
    """Relational arguments for JobPost"""


class VerificationTokenIncludeFromJobPostRecursive2(TypedDict, total=False):
    """Relational arguments for JobPost"""


class VerificationTokenIncludeFromJobPostRecursive3(TypedDict, total=False):
    """Relational arguments for JobPost"""


class VerificationTokenIncludeFromJobPostRecursive4(TypedDict, total=False):
    """Relational arguments for JobPost"""

    

class VerificationTokenArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    
    

class FindManyVerificationTokenArgsFromJobPost(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromJobPostRecursive1(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromJobPostRecursive2(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromJobPostRecursive3(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromJobPostRecursive4(TypedDict, total=False):
    """Arguments for JobPost"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyJobPostArgs = FindManyJobPostArgsFromJobPost
FindFirstJobPostArgs = FindManyJobPostArgsFromJobPost


    

class JobPostWhereInput(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    minSalary: Union[_float, 'types.FloatFilter']
    maxSalary: Union[_float, 'types.FloatFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanFilter']
    externalLink: Union[None, _str, 'types.StringFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    companyId: Union[_str, 'types.StringFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Tag: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['JobPostWhereInputRecursive1', List['JobPostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['JobPostWhereInputRecursive1']
    OR: List['JobPostWhereInputRecursive1']
    NOT: List['JobPostWhereInputRecursive1']


class JobPostWhereInputRecursive1(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    minSalary: Union[_float, 'types.FloatFilter']
    maxSalary: Union[_float, 'types.FloatFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanFilter']
    externalLink: Union[None, _str, 'types.StringFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    companyId: Union[_str, 'types.StringFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Tag: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['JobPostWhereInputRecursive2', List['JobPostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['JobPostWhereInputRecursive2']
    OR: List['JobPostWhereInputRecursive2']
    NOT: List['JobPostWhereInputRecursive2']


class JobPostWhereInputRecursive2(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    minSalary: Union[_float, 'types.FloatFilter']
    maxSalary: Union[_float, 'types.FloatFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanFilter']
    externalLink: Union[None, _str, 'types.StringFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    companyId: Union[_str, 'types.StringFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Tag: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['JobPostWhereInputRecursive3', List['JobPostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['JobPostWhereInputRecursive3']
    OR: List['JobPostWhereInputRecursive3']
    NOT: List['JobPostWhereInputRecursive3']


class JobPostWhereInputRecursive3(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    minSalary: Union[_float, 'types.FloatFilter']
    maxSalary: Union[_float, 'types.FloatFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanFilter']
    externalLink: Union[None, _str, 'types.StringFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    companyId: Union[_str, 'types.StringFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Tag: 'TagListRelationFilter'

    # should be noted that AND and NOT should be Union['JobPostWhereInputRecursive4', List['JobPostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['JobPostWhereInputRecursive4']
    OR: List['JobPostWhereInputRecursive4']
    NOT: List['JobPostWhereInputRecursive4']


class JobPostWhereInputRecursive4(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    minSalary: Union[_float, 'types.FloatFilter']
    maxSalary: Union[_float, 'types.FloatFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanFilter']
    externalLink: Union[None, _str, 'types.StringFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    companyId: Union[_str, 'types.StringFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    interval: 'enums.PayInterval'
    JobApplication: 'JobApplicationListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Tag: 'TagListRelationFilter'



# aggregate JobPost types


    

class JobPostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    minSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanWithAggregatesFilter']
    externalLink: Union[_str, 'types.StringWithAggregatesFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    interval: 'enums.PayInterval'

    AND: List['JobPostScalarWhereWithAggregatesInputRecursive1']
    OR: List['JobPostScalarWhereWithAggregatesInputRecursive1']
    NOT: List['JobPostScalarWhereWithAggregatesInputRecursive1']


class JobPostScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    minSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanWithAggregatesFilter']
    externalLink: Union[_str, 'types.StringWithAggregatesFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    interval: 'enums.PayInterval'

    AND: List['JobPostScalarWhereWithAggregatesInputRecursive2']
    OR: List['JobPostScalarWhereWithAggregatesInputRecursive2']
    NOT: List['JobPostScalarWhereWithAggregatesInputRecursive2']


class JobPostScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    minSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanWithAggregatesFilter']
    externalLink: Union[_str, 'types.StringWithAggregatesFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    interval: 'enums.PayInterval'

    AND: List['JobPostScalarWhereWithAggregatesInputRecursive3']
    OR: List['JobPostScalarWhereWithAggregatesInputRecursive3']
    NOT: List['JobPostScalarWhereWithAggregatesInputRecursive3']


class JobPostScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    minSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanWithAggregatesFilter']
    externalLink: Union[_str, 'types.StringWithAggregatesFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    interval: 'enums.PayInterval'

    AND: List['JobPostScalarWhereWithAggregatesInputRecursive4']
    OR: List['JobPostScalarWhereWithAggregatesInputRecursive4']
    NOT: List['JobPostScalarWhereWithAggregatesInputRecursive4']


class JobPostScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """JobPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    minSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSalary: Union[_float, 'types.FloatWithAggregatesFilter']
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: Union[_bool, 'types.BooleanWithAggregatesFilter']
    externalLink: Union[_str, 'types.StringWithAggregatesFilter']
    workMode: 'enums.WorkMode'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.JobStatus'
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    interval: 'enums.PayInterval'



class JobPostGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    location: _str
    minSalary: _float
    maxSalary: _float
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: _bool
    externalLink: _str
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    companyId: _str
    status: 'enums.JobStatus'
    expiresAt: datetime.datetime
    interval: 'enums.PayInterval'
    _sum: 'JobPostSumAggregateOutput'
    _avg: 'JobPostAvgAggregateOutput'
    _min: 'JobPostMinAggregateOutput'
    _max: 'JobPostMaxAggregateOutput'
    _count: 'JobPostCountAggregateOutput'


class JobPostAvgAggregateOutput(TypedDict, total=False):
    """JobPost output for aggregating averages"""
    minSalary: float
    maxSalary: float


class JobPostSumAggregateOutput(TypedDict, total=False):
    """JobPost output for aggregating sums"""
    minSalary: _float
    maxSalary: _float


class JobPostScalarAggregateOutput(TypedDict, total=False):
    """JobPost output including scalar fields"""
    id: _str
    title: _str
    description: _str
    location: _str
    minSalary: _float
    maxSalary: _float
    currency: 'enums.Currency'
    type: 'enums.JobType'
    isQuickApply: _bool
    externalLink: _str
    workMode: 'enums.WorkMode'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    companyId: _str
    status: 'enums.JobStatus'
    expiresAt: datetime.datetime
    interval: 'enums.PayInterval'


JobPostMinAggregateOutput = JobPostScalarAggregateOutput
JobPostMaxAggregateOutput = JobPostScalarAggregateOutput


class JobPostMaxAggregateInput(TypedDict, total=False):
    """JobPost input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    location: bool
    minSalary: bool
    maxSalary: bool
    currency: bool
    type: bool
    isQuickApply: bool
    externalLink: bool
    workMode: bool
    createdAt: bool
    updatedAt: bool
    companyId: bool
    status: bool
    expiresAt: bool
    interval: bool


class JobPostMinAggregateInput(TypedDict, total=False):
    """JobPost input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    location: bool
    minSalary: bool
    maxSalary: bool
    currency: bool
    type: bool
    isQuickApply: bool
    externalLink: bool
    workMode: bool
    createdAt: bool
    updatedAt: bool
    companyId: bool
    status: bool
    expiresAt: bool
    interval: bool


class JobPostNumberAggregateInput(TypedDict, total=False):
    """JobPost input for aggregating numbers"""
    minSalary: bool
    maxSalary: bool


JobPostAvgAggregateInput = JobPostNumberAggregateInput
JobPostSumAggregateInput = JobPostNumberAggregateInput


JobPostCountAggregateInput = TypedDict(
    'JobPostCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'location': bool,
        'minSalary': bool,
        'maxSalary': bool,
        'currency': bool,
        'type': bool,
        'isQuickApply': bool,
        'externalLink': bool,
        'workMode': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'companyId': bool,
        'status': bool,
        'expiresAt': bool,
        'interval': bool,
        '_all': bool,
    },
    total=False,
)

JobPostCountAggregateOutput = TypedDict(
    'JobPostCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'location': int,
        'minSalary': int,
        'maxSalary': int,
        'currency': int,
        'type': int,
        'isQuickApply': int,
        'externalLink': int,
        'workMode': int,
        'createdAt': int,
        'updatedAt': int,
        'companyId': int,
        'status': int,
        'expiresAt': int,
        'interval': int,
        '_all': int,
    },
    total=False,
)


JobPostKeys = Literal[
    'id',
    'title',
    'description',
    'location',
    'minSalary',
    'maxSalary',
    'currency',
    'type',
    'isQuickApply',
    'externalLink',
    'workMode',
    'createdAt',
    'updatedAt',
    'companyId',
    'status',
    'expiresAt',
    'interval',
    'JobApplication',
    'Company',
    'JobTracker',
    'Tag',
]
JobPostScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'location',
    'minSalary',
    'maxSalary',
    'currency',
    'type',
    'isQuickApply',
    'externalLink',
    'workMode',
    'createdAt',
    'updatedAt',
    'companyId',
    'status',
    'expiresAt',
    'interval',
]
JobPostScalarFieldKeysT = TypeVar('JobPostScalarFieldKeysT', bound=JobPostScalarFieldKeys)

JobPostRelationalFieldKeys = Literal[
        'JobApplication',
        'Company',
        'JobTracker',
        'Tag',
    ]

# JobTracker types

class JobTrackerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the JobTracker create method"""
    id: _int
    jobId: _str
    createdAt: datetime.datetime
    userId: _str
    JobPost: 'JobPostCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class JobTrackerCreateInput(JobTrackerOptionalCreateInput):
    """Required arguments to the JobTracker create method"""
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class JobTrackerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the JobTracker create method, without relations"""
    id: _int
    jobId: _str
    createdAt: datetime.datetime
    userId: _str


class JobTrackerCreateWithoutRelationsInput(JobTrackerOptionalCreateWithoutRelationsInput):
    """Required arguments to the JobTracker create method, without relations"""
    updatedAt: datetime.datetime


class JobTrackerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'JobTrackerCreateWithoutRelationsInput'
    connect: 'JobTrackerWhereUniqueInput'


class JobTrackerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['JobTrackerCreateWithoutRelationsInput', List['JobTrackerCreateWithoutRelationsInput']]
    connect: Union['JobTrackerWhereUniqueInput', List['JobTrackerWhereUniqueInput']]


_JobTrackerWhereUnique_id_Input = TypedDict(
    '_JobTrackerWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

JobTrackerWhereUniqueInput = _JobTrackerWhereUnique_id_Input


class JobTrackerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    JobPost: 'JobPostUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class JobTrackerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class JobTrackerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['JobTrackerCreateWithoutRelationsInput']
    connect: List['JobTrackerWhereUniqueInput']
    set: List['JobTrackerWhereUniqueInput']
    disconnect: List['JobTrackerWhereUniqueInput']
    delete: List['JobTrackerWhereUniqueInput']

    # TODO
    # update: List['JobTrackerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['JobTrackerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['JobTrackerScalarWhereInput']
    # upsert: List['JobTrackerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['JobTrackerCreateOrConnectWithoutRelationsInput']


class JobTrackerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'JobTrackerCreateWithoutRelationsInput'
    connect: 'JobTrackerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'JobTrackerUpdateInput'
    # upsert: 'JobTrackerUpsertWithoutRelationsInput'
    # connectOrCreate: 'JobTrackerCreateOrConnectWithoutRelationsInput'


class JobTrackerUpsertInput(TypedDict):
    create: 'JobTrackerCreateInput'
    update: 'JobTrackerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_JobTracker_id_OrderByInput = TypedDict(
    '_JobTracker_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_JobTracker_jobId_OrderByInput = TypedDict(
    '_JobTracker_jobId_OrderByInput',
    {
        'jobId': 'SortOrder',
    },
    total=True
)

_JobTracker_createdAt_OrderByInput = TypedDict(
    '_JobTracker_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_JobTracker_updatedAt_OrderByInput = TypedDict(
    '_JobTracker_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_JobTracker_userId_OrderByInput = TypedDict(
    '_JobTracker_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

JobTrackerOrderByInput = Union[
    '_JobTracker_id_OrderByInput',
    '_JobTracker_jobId_OrderByInput',
    '_JobTracker_createdAt_OrderByInput',
    '_JobTracker_updatedAt_OrderByInput',
    '_JobTracker_userId_OrderByInput',
]



# recursive JobTracker types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

JobTrackerRelationFilter = TypedDict(
    'JobTrackerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class JobTrackerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class JobTrackerInclude(TypedDict, total=False):
    """JobTracker relational arguments"""
    JobPost: Union[bool, 'JobPostArgsFromJobTracker']
    User: Union[bool, 'UserArgsFromJobTracker']


    

class CompanyIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive1']


class CompanyIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive2']


class CompanyIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive3']


class CompanyIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive4']


class CompanyIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class CompanyArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyCompanyArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive1']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class JobApplicationIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive2']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class JobApplicationIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive3']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class JobApplicationIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive4']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class JobApplicationIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class JobApplicationArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyJobApplicationArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromJobTrackerRecursive1']


class JobPostIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromJobTrackerRecursive2']


class JobPostIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromJobTrackerRecursive3']


class JobPostIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromJobTrackerRecursive4']


class JobPostIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class JobPostArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyJobPostArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive1']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class JobTrackerIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive2']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class JobTrackerIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive3']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class JobTrackerIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'JobPostArgsFromJobTrackerRecursive4']
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class JobTrackerIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class JobTrackerArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyJobTrackerArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive1']


class TagIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive2']


class TagIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive3']


class TagIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromJobTrackerRecursive4']


class TagIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class TagArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyTagArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class UploadedCvIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class UploadedCvIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class UploadedCvIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class UploadedCvIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class UploadedCvArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyUploadedCvArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    Account: Union[bool, 'FindManyAccountArgsFromJobTrackerRecursive1']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromJobTrackerRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobTrackerRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobTrackerRecursive1']


class UserIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    Account: Union[bool, 'FindManyAccountArgsFromJobTrackerRecursive2']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromJobTrackerRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobTrackerRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobTrackerRecursive2']


class UserIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    Account: Union[bool, 'FindManyAccountArgsFromJobTrackerRecursive3']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromJobTrackerRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobTrackerRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobTrackerRecursive3']


class UserIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    Account: Union[bool, 'FindManyAccountArgsFromJobTrackerRecursive4']
    Company: Union[bool, 'CompanyArgsFromJobTrackerRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromJobTrackerRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromJobTrackerRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromJobTrackerRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromJobTrackerRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromJobTrackerRecursive4']


class UserIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class UserArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyUserArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class WorkExperienceIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class WorkExperienceIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class WorkExperienceIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class WorkExperienceIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class WorkExperienceArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyWorkExperienceArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class AccountIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class AccountIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class AccountIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class AccountIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class AccountArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyAccountArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive1']


class SessionIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive2']


class SessionIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive3']


class SessionIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""
    User: Union[bool, 'UserArgsFromJobTrackerRecursive4']


class SessionIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class SessionArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManySessionArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromJobTracker(TypedDict, total=False):
    """Relational arguments for JobTracker"""


class VerificationTokenIncludeFromJobTrackerRecursive1(TypedDict, total=False):
    """Relational arguments for JobTracker"""


class VerificationTokenIncludeFromJobTrackerRecursive2(TypedDict, total=False):
    """Relational arguments for JobTracker"""


class VerificationTokenIncludeFromJobTrackerRecursive3(TypedDict, total=False):
    """Relational arguments for JobTracker"""


class VerificationTokenIncludeFromJobTrackerRecursive4(TypedDict, total=False):
    """Relational arguments for JobTracker"""

    

class VerificationTokenArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    
    

class FindManyVerificationTokenArgsFromJobTracker(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromJobTrackerRecursive1(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromJobTrackerRecursive2(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromJobTrackerRecursive3(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromJobTrackerRecursive4(TypedDict, total=False):
    """Arguments for JobTracker"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyJobTrackerArgs = FindManyJobTrackerArgsFromJobTracker
FindFirstJobTrackerArgs = FindManyJobTrackerArgsFromJobTracker


    

class JobTrackerWhereInput(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    jobId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobTrackerWhereInputRecursive1', List['JobTrackerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['JobTrackerWhereInputRecursive1']
    OR: List['JobTrackerWhereInputRecursive1']
    NOT: List['JobTrackerWhereInputRecursive1']


class JobTrackerWhereInputRecursive1(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    jobId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobTrackerWhereInputRecursive2', List['JobTrackerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['JobTrackerWhereInputRecursive2']
    OR: List['JobTrackerWhereInputRecursive2']
    NOT: List['JobTrackerWhereInputRecursive2']


class JobTrackerWhereInputRecursive2(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    jobId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobTrackerWhereInputRecursive3', List['JobTrackerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['JobTrackerWhereInputRecursive3']
    OR: List['JobTrackerWhereInputRecursive3']
    NOT: List['JobTrackerWhereInputRecursive3']


class JobTrackerWhereInputRecursive3(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    jobId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['JobTrackerWhereInputRecursive4', List['JobTrackerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['JobTrackerWhereInputRecursive4']
    OR: List['JobTrackerWhereInputRecursive4']
    NOT: List['JobTrackerWhereInputRecursive4']


class JobTrackerWhereInputRecursive4(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    jobId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostRelationFilter'
    User: 'UserRelationFilter'



# aggregate JobTracker types


    

class JobTrackerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobTrackerScalarWhereWithAggregatesInputRecursive1']
    OR: List['JobTrackerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['JobTrackerScalarWhereWithAggregatesInputRecursive1']


class JobTrackerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobTrackerScalarWhereWithAggregatesInputRecursive2']
    OR: List['JobTrackerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['JobTrackerScalarWhereWithAggregatesInputRecursive2']


class JobTrackerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobTrackerScalarWhereWithAggregatesInputRecursive3']
    OR: List['JobTrackerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['JobTrackerScalarWhereWithAggregatesInputRecursive3']


class JobTrackerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['JobTrackerScalarWhereWithAggregatesInputRecursive4']
    OR: List['JobTrackerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['JobTrackerScalarWhereWithAggregatesInputRecursive4']


class JobTrackerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """JobTracker arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    jobId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class JobTrackerGroupByOutput(TypedDict, total=False):
    id: _int
    jobId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str
    _sum: 'JobTrackerSumAggregateOutput'
    _avg: 'JobTrackerAvgAggregateOutput'
    _min: 'JobTrackerMinAggregateOutput'
    _max: 'JobTrackerMaxAggregateOutput'
    _count: 'JobTrackerCountAggregateOutput'


class JobTrackerAvgAggregateOutput(TypedDict, total=False):
    """JobTracker output for aggregating averages"""
    id: float


class JobTrackerSumAggregateOutput(TypedDict, total=False):
    """JobTracker output for aggregating sums"""
    id: _int


class JobTrackerScalarAggregateOutput(TypedDict, total=False):
    """JobTracker output including scalar fields"""
    id: _int
    jobId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str


JobTrackerMinAggregateOutput = JobTrackerScalarAggregateOutput
JobTrackerMaxAggregateOutput = JobTrackerScalarAggregateOutput


class JobTrackerMaxAggregateInput(TypedDict, total=False):
    """JobTracker input for aggregating by max"""
    id: bool
    jobId: bool
    createdAt: bool
    updatedAt: bool
    userId: bool


class JobTrackerMinAggregateInput(TypedDict, total=False):
    """JobTracker input for aggregating by min"""
    id: bool
    jobId: bool
    createdAt: bool
    updatedAt: bool
    userId: bool


class JobTrackerNumberAggregateInput(TypedDict, total=False):
    """JobTracker input for aggregating numbers"""
    id: bool


JobTrackerAvgAggregateInput = JobTrackerNumberAggregateInput
JobTrackerSumAggregateInput = JobTrackerNumberAggregateInput


JobTrackerCountAggregateInput = TypedDict(
    'JobTrackerCountAggregateInput',
    {
        'id': bool,
        'jobId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

JobTrackerCountAggregateOutput = TypedDict(
    'JobTrackerCountAggregateOutput',
    {
        'id': int,
        'jobId': int,
        'createdAt': int,
        'updatedAt': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


JobTrackerKeys = Literal[
    'id',
    'jobId',
    'createdAt',
    'updatedAt',
    'userId',
    'JobPost',
    'User',
]
JobTrackerScalarFieldKeys = Literal[
    'id',
    'jobId',
    'createdAt',
    'updatedAt',
    'userId',
]
JobTrackerScalarFieldKeysT = TypeVar('JobTrackerScalarFieldKeysT', bound=JobTrackerScalarFieldKeys)

JobTrackerRelationalFieldKeys = Literal[
        'JobPost',
        'User',
    ]

# Tag types

class TagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tag create method"""
    id: _int
    JobPost: 'JobPostCreateManyNestedWithoutRelationsInput'


class TagCreateInput(TagOptionalCreateInput):
    """Required arguments to the Tag create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tag create method, without relations"""
    id: _int


class TagCreateWithoutRelationsInput(TagOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tag create method, without relations"""
    name: _str


class TagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'


class TagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TagCreateWithoutRelationsInput', List['TagCreateWithoutRelationsInput']]
    connect: Union['TagWhereUniqueInput', List['TagWhereUniqueInput']]


_TagWhereUnique_id_Input = TypedDict(
    '_TagWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_TagWhereUnique_name_Input = TypedDict(
    '_TagWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

TagWhereUniqueInput = Union[
    '_TagWhereUnique_id_Input',
    '_TagWhereUnique_name_Input',
]


class TagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    JobPost: 'JobPostUpdateManyWithoutRelationsInput'


class TagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class TagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TagCreateWithoutRelationsInput']
    connect: List['TagWhereUniqueInput']
    set: List['TagWhereUniqueInput']
    disconnect: List['TagWhereUniqueInput']
    delete: List['TagWhereUniqueInput']

    # TODO
    # update: List['TagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TagScalarWhereInput']
    # upsert: List['TagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TagCreateOrConnectWithoutRelationsInput']


class TagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TagUpdateInput'
    # upsert: 'TagUpsertWithoutRelationsInput'
    # connectOrCreate: 'TagCreateOrConnectWithoutRelationsInput'


class TagUpsertInput(TypedDict):
    create: 'TagCreateInput'
    update: 'TagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tag_id_OrderByInput = TypedDict(
    '_Tag_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tag_name_OrderByInput = TypedDict(
    '_Tag_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

TagOrderByInput = Union[
    '_Tag_id_OrderByInput',
    '_Tag_name_OrderByInput',
]



# recursive Tag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TagRelationFilter = TypedDict(
    'TagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TagInclude(TypedDict, total=False):
    """Tag relational arguments"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromTag']


    

class CompanyIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive1']


class CompanyIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive2']


class CompanyIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive3']


class CompanyIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive4']


class CompanyIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class CompanyArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyCompanyArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive1']
    User: Union[bool, 'UserArgsFromTagRecursive1']


class JobApplicationIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive2']
    User: Union[bool, 'UserArgsFromTagRecursive2']


class JobApplicationIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive3']
    User: Union[bool, 'UserArgsFromTagRecursive3']


class JobApplicationIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive4']
    User: Union[bool, 'UserArgsFromTagRecursive4']


class JobApplicationIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class JobApplicationArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyJobApplicationArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive1']
    Company: Union[bool, 'CompanyArgsFromTagRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromTagRecursive1']


class JobPostIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive2']
    Company: Union[bool, 'CompanyArgsFromTagRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromTagRecursive2']


class JobPostIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive3']
    Company: Union[bool, 'CompanyArgsFromTagRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromTagRecursive3']


class JobPostIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive4']
    Company: Union[bool, 'CompanyArgsFromTagRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromTagRecursive4']


class JobPostIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class JobPostArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyJobPostArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive1']
    User: Union[bool, 'UserArgsFromTagRecursive1']


class JobTrackerIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive2']
    User: Union[bool, 'UserArgsFromTagRecursive2']


class JobTrackerIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive3']
    User: Union[bool, 'UserArgsFromTagRecursive3']


class JobTrackerIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'JobPostArgsFromTagRecursive4']
    User: Union[bool, 'UserArgsFromTagRecursive4']


class JobTrackerIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class JobTrackerArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyJobTrackerArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive1']


class TagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive2']


class TagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive3']


class TagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromTagRecursive4']


class TagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class TagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive1']


class UploadedCvIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive2']


class UploadedCvIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive3']


class UploadedCvIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive4']


class UploadedCvIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class UploadedCvArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyUploadedCvArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    Account: Union[bool, 'FindManyAccountArgsFromTagRecursive1']
    Company: Union[bool, 'CompanyArgsFromTagRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromTagRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromTagRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromTagRecursive1']


class UserIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    Account: Union[bool, 'FindManyAccountArgsFromTagRecursive2']
    Company: Union[bool, 'CompanyArgsFromTagRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromTagRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromTagRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromTagRecursive2']


class UserIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    Account: Union[bool, 'FindManyAccountArgsFromTagRecursive3']
    Company: Union[bool, 'CompanyArgsFromTagRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromTagRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromTagRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromTagRecursive3']


class UserIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    Account: Union[bool, 'FindManyAccountArgsFromTagRecursive4']
    Company: Union[bool, 'CompanyArgsFromTagRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromTagRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromTagRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromTagRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromTagRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromTagRecursive4']


class UserIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class UserArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyUserArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive1']


class WorkExperienceIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive2']


class WorkExperienceIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive3']


class WorkExperienceIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive4']


class WorkExperienceIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class WorkExperienceArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyWorkExperienceArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive1']


class AccountIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive2']


class AccountIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive3']


class AccountIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive4']


class AccountIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class AccountArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyAccountArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive1']


class SessionIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive2']


class SessionIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive3']


class SessionIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    User: Union[bool, 'UserArgsFromTagRecursive4']


class SessionIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class SessionArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManySessionArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""


class VerificationTokenIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""


class VerificationTokenIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""


class VerificationTokenIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""


class VerificationTokenIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class VerificationTokenArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyVerificationTokenArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyTagArgs = FindManyTagArgsFromTag
FindFirstTagArgs = FindManyTagArgsFromTag


    

class TagWhereInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive1', List['TagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive1']
    OR: List['TagWhereInputRecursive1']
    NOT: List['TagWhereInputRecursive1']


class TagWhereInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive2', List['TagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive2']
    OR: List['TagWhereInputRecursive2']
    NOT: List['TagWhereInputRecursive2']


class TagWhereInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive3', List['TagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive3']
    OR: List['TagWhereInputRecursive3']
    NOT: List['TagWhereInputRecursive3']


class TagWhereInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive4', List['TagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive4']
    OR: List['TagWhereInputRecursive4']
    NOT: List['TagWhereInputRecursive4']


class TagWhereInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    JobPost: 'JobPostListRelationFilter'



# aggregate Tag types


    

class TagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive1']
    OR: List['TagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive1']


class TagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive2']
    OR: List['TagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive2']


class TagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive3']
    OR: List['TagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive3']


class TagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive4']
    OR: List['TagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive4']


class TagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class TagGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'TagSumAggregateOutput'
    _avg: 'TagAvgAggregateOutput'
    _min: 'TagMinAggregateOutput'
    _max: 'TagMaxAggregateOutput'
    _count: 'TagCountAggregateOutput'


class TagAvgAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating averages"""
    id: float


class TagSumAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating sums"""
    id: _int


class TagScalarAggregateOutput(TypedDict, total=False):
    """Tag output including scalar fields"""
    id: _int
    name: _str


TagMinAggregateOutput = TagScalarAggregateOutput
TagMaxAggregateOutput = TagScalarAggregateOutput


class TagMaxAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by max"""
    id: bool
    name: bool


class TagMinAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by min"""
    id: bool
    name: bool


class TagNumberAggregateInput(TypedDict, total=False):
    """Tag input for aggregating numbers"""
    id: bool


TagAvgAggregateInput = TagNumberAggregateInput
TagSumAggregateInput = TagNumberAggregateInput


TagCountAggregateInput = TypedDict(
    'TagCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

TagCountAggregateOutput = TypedDict(
    'TagCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


TagKeys = Literal[
    'id',
    'name',
    'JobPost',
]
TagScalarFieldKeys = Literal[
    'id',
    'name',
]
TagScalarFieldKeysT = TypeVar('TagScalarFieldKeysT', bound=TagScalarFieldKeys)

TagRelationalFieldKeys = Literal[
        'JobPost',
    ]

# UploadedCv types

class UploadedCvOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UploadedCv create method"""
    id: _int
    userId: _str
    createdAt: datetime.datetime
    friendlyName: _str
    User: 'UserCreateNestedWithoutRelationsInput'


class UploadedCvCreateInput(UploadedCvOptionalCreateInput):
    """Required arguments to the UploadedCv create method"""
    updatedAt: datetime.datetime
    fileName: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UploadedCvOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UploadedCv create method, without relations"""
    id: _int
    userId: _str
    createdAt: datetime.datetime
    friendlyName: _str


class UploadedCvCreateWithoutRelationsInput(UploadedCvOptionalCreateWithoutRelationsInput):
    """Required arguments to the UploadedCv create method, without relations"""
    updatedAt: datetime.datetime
    fileName: _str


class UploadedCvCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UploadedCvCreateWithoutRelationsInput'
    connect: 'UploadedCvWhereUniqueInput'


class UploadedCvCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UploadedCvCreateWithoutRelationsInput', List['UploadedCvCreateWithoutRelationsInput']]
    connect: Union['UploadedCvWhereUniqueInput', List['UploadedCvWhereUniqueInput']]


_UploadedCvWhereUnique_id_Input = TypedDict(
    '_UploadedCvWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UploadedCvWhereUnique_userId_Input = TypedDict(
    '_UploadedCvWhereUnique_userId_Input',
    {
        'userId': '_str',
    },
    total=True
)

UploadedCvWhereUniqueInput = Union[
    '_UploadedCvWhereUnique_id_Input',
    '_UploadedCvWhereUnique_userId_Input',
]


class UploadedCvUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    fileName: _str
    friendlyName: _str
    User: 'UserUpdateOneWithoutRelationsInput'


class UploadedCvUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    fileName: _str
    friendlyName: _str


class UploadedCvUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UploadedCvCreateWithoutRelationsInput']
    connect: List['UploadedCvWhereUniqueInput']
    set: List['UploadedCvWhereUniqueInput']
    disconnect: List['UploadedCvWhereUniqueInput']
    delete: List['UploadedCvWhereUniqueInput']

    # TODO
    # update: List['UploadedCvUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UploadedCvUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UploadedCvScalarWhereInput']
    # upsert: List['UploadedCvUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UploadedCvCreateOrConnectWithoutRelationsInput']


class UploadedCvUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UploadedCvCreateWithoutRelationsInput'
    connect: 'UploadedCvWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UploadedCvUpdateInput'
    # upsert: 'UploadedCvUpsertWithoutRelationsInput'
    # connectOrCreate: 'UploadedCvCreateOrConnectWithoutRelationsInput'


class UploadedCvUpsertInput(TypedDict):
    create: 'UploadedCvCreateInput'
    update: 'UploadedCvUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UploadedCv_id_OrderByInput = TypedDict(
    '_UploadedCv_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UploadedCv_userId_OrderByInput = TypedDict(
    '_UploadedCv_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UploadedCv_createdAt_OrderByInput = TypedDict(
    '_UploadedCv_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UploadedCv_updatedAt_OrderByInput = TypedDict(
    '_UploadedCv_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_UploadedCv_fileName_OrderByInput = TypedDict(
    '_UploadedCv_fileName_OrderByInput',
    {
        'fileName': 'SortOrder',
    },
    total=True
)

_UploadedCv_friendlyName_OrderByInput = TypedDict(
    '_UploadedCv_friendlyName_OrderByInput',
    {
        'friendlyName': 'SortOrder',
    },
    total=True
)

UploadedCvOrderByInput = Union[
    '_UploadedCv_id_OrderByInput',
    '_UploadedCv_userId_OrderByInput',
    '_UploadedCv_createdAt_OrderByInput',
    '_UploadedCv_updatedAt_OrderByInput',
    '_UploadedCv_fileName_OrderByInput',
    '_UploadedCv_friendlyName_OrderByInput',
]



# recursive UploadedCv types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UploadedCvRelationFilter = TypedDict(
    'UploadedCvRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UploadedCvListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UploadedCvInclude(TypedDict, total=False):
    """UploadedCv relational arguments"""
    User: Union[bool, 'UserArgsFromUploadedCv']


    

class CompanyIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive1']


class CompanyIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive2']


class CompanyIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive3']


class CompanyIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive4']


class CompanyIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class CompanyArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyCompanyArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive1']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class JobApplicationIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive2']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class JobApplicationIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive3']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class JobApplicationIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive4']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class JobApplicationIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class JobApplicationArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyJobApplicationArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive1']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromUploadedCvRecursive1']


class JobPostIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive2']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromUploadedCvRecursive2']


class JobPostIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive3']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromUploadedCvRecursive3']


class JobPostIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive4']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromUploadedCvRecursive4']


class JobPostIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class JobPostArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyJobPostArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive1']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class JobTrackerIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive2']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class JobTrackerIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive3']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class JobTrackerIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'JobPostArgsFromUploadedCvRecursive4']
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class JobTrackerIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class JobTrackerArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyJobTrackerArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive1']


class TagIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive2']


class TagIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive3']


class TagIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUploadedCvRecursive4']


class TagIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class TagArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyTagArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class UploadedCvIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class UploadedCvIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class UploadedCvIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class UploadedCvIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class UploadedCvArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyUploadedCvArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    Account: Union[bool, 'FindManyAccountArgsFromUploadedCvRecursive1']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromUploadedCvRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUploadedCvRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUploadedCvRecursive1']


class UserIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    Account: Union[bool, 'FindManyAccountArgsFromUploadedCvRecursive2']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromUploadedCvRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUploadedCvRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUploadedCvRecursive2']


class UserIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    Account: Union[bool, 'FindManyAccountArgsFromUploadedCvRecursive3']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromUploadedCvRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUploadedCvRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUploadedCvRecursive3']


class UserIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    Account: Union[bool, 'FindManyAccountArgsFromUploadedCvRecursive4']
    Company: Union[bool, 'CompanyArgsFromUploadedCvRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUploadedCvRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUploadedCvRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromUploadedCvRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUploadedCvRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUploadedCvRecursive4']


class UserIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class UserArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyUserArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class WorkExperienceIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class WorkExperienceIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class WorkExperienceIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class WorkExperienceIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class WorkExperienceArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyWorkExperienceArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class AccountIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class AccountIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class AccountIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class AccountIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class AccountArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyAccountArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive1']


class SessionIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive2']


class SessionIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive3']


class SessionIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""
    User: Union[bool, 'UserArgsFromUploadedCvRecursive4']


class SessionIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class SessionArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManySessionArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUploadedCv(TypedDict, total=False):
    """Relational arguments for UploadedCv"""


class VerificationTokenIncludeFromUploadedCvRecursive1(TypedDict, total=False):
    """Relational arguments for UploadedCv"""


class VerificationTokenIncludeFromUploadedCvRecursive2(TypedDict, total=False):
    """Relational arguments for UploadedCv"""


class VerificationTokenIncludeFromUploadedCvRecursive3(TypedDict, total=False):
    """Relational arguments for UploadedCv"""


class VerificationTokenIncludeFromUploadedCvRecursive4(TypedDict, total=False):
    """Relational arguments for UploadedCv"""

    

class VerificationTokenArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    
    

class FindManyVerificationTokenArgsFromUploadedCv(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUploadedCvRecursive1(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUploadedCvRecursive2(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUploadedCvRecursive3(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUploadedCvRecursive4(TypedDict, total=False):
    """Arguments for UploadedCv"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyUploadedCvArgs = FindManyUploadedCvArgsFromUploadedCv
FindFirstUploadedCvArgs = FindManyUploadedCvArgsFromUploadedCv


    

class UploadedCvWhereInput(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fileName: Union[_str, 'types.StringFilter']
    friendlyName: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UploadedCvWhereInputRecursive1', List['UploadedCvWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UploadedCvWhereInputRecursive1']
    OR: List['UploadedCvWhereInputRecursive1']
    NOT: List['UploadedCvWhereInputRecursive1']


class UploadedCvWhereInputRecursive1(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fileName: Union[_str, 'types.StringFilter']
    friendlyName: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UploadedCvWhereInputRecursive2', List['UploadedCvWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UploadedCvWhereInputRecursive2']
    OR: List['UploadedCvWhereInputRecursive2']
    NOT: List['UploadedCvWhereInputRecursive2']


class UploadedCvWhereInputRecursive2(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fileName: Union[_str, 'types.StringFilter']
    friendlyName: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UploadedCvWhereInputRecursive3', List['UploadedCvWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UploadedCvWhereInputRecursive3']
    OR: List['UploadedCvWhereInputRecursive3']
    NOT: List['UploadedCvWhereInputRecursive3']


class UploadedCvWhereInputRecursive3(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fileName: Union[_str, 'types.StringFilter']
    friendlyName: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UploadedCvWhereInputRecursive4', List['UploadedCvWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UploadedCvWhereInputRecursive4']
    OR: List['UploadedCvWhereInputRecursive4']
    NOT: List['UploadedCvWhereInputRecursive4']


class UploadedCvWhereInputRecursive4(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fileName: Union[_str, 'types.StringFilter']
    friendlyName: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'



# aggregate UploadedCv types


    

class UploadedCvScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    friendlyName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UploadedCvScalarWhereWithAggregatesInputRecursive1']
    OR: List['UploadedCvScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UploadedCvScalarWhereWithAggregatesInputRecursive1']


class UploadedCvScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    friendlyName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UploadedCvScalarWhereWithAggregatesInputRecursive2']
    OR: List['UploadedCvScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UploadedCvScalarWhereWithAggregatesInputRecursive2']


class UploadedCvScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    friendlyName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UploadedCvScalarWhereWithAggregatesInputRecursive3']
    OR: List['UploadedCvScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UploadedCvScalarWhereWithAggregatesInputRecursive3']


class UploadedCvScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    friendlyName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UploadedCvScalarWhereWithAggregatesInputRecursive4']
    OR: List['UploadedCvScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UploadedCvScalarWhereWithAggregatesInputRecursive4']


class UploadedCvScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UploadedCv arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    friendlyName: Union[_str, 'types.StringWithAggregatesFilter']



class UploadedCvGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    fileName: _str
    friendlyName: _str
    _sum: 'UploadedCvSumAggregateOutput'
    _avg: 'UploadedCvAvgAggregateOutput'
    _min: 'UploadedCvMinAggregateOutput'
    _max: 'UploadedCvMaxAggregateOutput'
    _count: 'UploadedCvCountAggregateOutput'


class UploadedCvAvgAggregateOutput(TypedDict, total=False):
    """UploadedCv output for aggregating averages"""
    id: float


class UploadedCvSumAggregateOutput(TypedDict, total=False):
    """UploadedCv output for aggregating sums"""
    id: _int


class UploadedCvScalarAggregateOutput(TypedDict, total=False):
    """UploadedCv output including scalar fields"""
    id: _int
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    fileName: _str
    friendlyName: _str


UploadedCvMinAggregateOutput = UploadedCvScalarAggregateOutput
UploadedCvMaxAggregateOutput = UploadedCvScalarAggregateOutput


class UploadedCvMaxAggregateInput(TypedDict, total=False):
    """UploadedCv input for aggregating by max"""
    id: bool
    userId: bool
    createdAt: bool
    updatedAt: bool
    fileName: bool
    friendlyName: bool


class UploadedCvMinAggregateInput(TypedDict, total=False):
    """UploadedCv input for aggregating by min"""
    id: bool
    userId: bool
    createdAt: bool
    updatedAt: bool
    fileName: bool
    friendlyName: bool


class UploadedCvNumberAggregateInput(TypedDict, total=False):
    """UploadedCv input for aggregating numbers"""
    id: bool


UploadedCvAvgAggregateInput = UploadedCvNumberAggregateInput
UploadedCvSumAggregateInput = UploadedCvNumberAggregateInput


UploadedCvCountAggregateInput = TypedDict(
    'UploadedCvCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'fileName': bool,
        'friendlyName': bool,
        '_all': bool,
    },
    total=False,
)

UploadedCvCountAggregateOutput = TypedDict(
    'UploadedCvCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        'fileName': int,
        'friendlyName': int,
        '_all': int,
    },
    total=False,
)


UploadedCvKeys = Literal[
    'id',
    'userId',
    'createdAt',
    'updatedAt',
    'fileName',
    'friendlyName',
    'User',
]
UploadedCvScalarFieldKeys = Literal[
    'id',
    'userId',
    'createdAt',
    'updatedAt',
    'fileName',
    'friendlyName',
]
UploadedCvScalarFieldKeysT = TypeVar('UploadedCvScalarFieldKeysT', bound=UploadedCvScalarFieldKeys)

UploadedCvRelationalFieldKeys = Literal[
        'User',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    firstName: Optional[_str]
    lastName: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    bio: Optional[_str]
    email: Optional[_str]
    location: Optional[_str]
    createdAt: datetime.datetime
    githubLink: Optional[_str]
    linkedinLink: Optional[_str]
    twitterLink: Optional[_str]
    bioCompletions: _int
    lastBioReset: Optional[datetime.datetime]
    stripe_current_period_end: Optional[datetime.datetime]
    stripe_customer_id: Optional[_str]
    stripe_price_id: Optional[_str]
    stripe_subscription_id: Optional[_str]
    isSuperUser: _bool
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    name: Optional[_str]
    isOnboard: _bool
    portfolioLink: Optional[_str]
    Account: 'AccountCreateManyNestedWithoutRelationsInput'
    Company: 'CompanyCreateNestedWithoutRelationsInput'
    JobApplication: 'JobApplicationCreateManyNestedWithoutRelationsInput'
    JobTracker: 'JobTrackerCreateManyNestedWithoutRelationsInput'
    Session: 'SessionCreateManyNestedWithoutRelationsInput'
    UploadedCv: 'UploadedCvCreateNestedWithoutRelationsInput'
    WorkExperience: 'WorkExperienceCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    firstName: Optional[_str]
    lastName: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    bio: Optional[_str]
    email: Optional[_str]
    location: Optional[_str]
    createdAt: datetime.datetime
    githubLink: Optional[_str]
    linkedinLink: Optional[_str]
    twitterLink: Optional[_str]
    bioCompletions: _int
    lastBioReset: Optional[datetime.datetime]
    stripe_current_period_end: Optional[datetime.datetime]
    stripe_customer_id: Optional[_str]
    stripe_price_id: Optional[_str]
    stripe_subscription_id: Optional[_str]
    isSuperUser: _bool
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    name: Optional[_str]
    isOnboard: _bool
    portfolioLink: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    id: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_stripe_customer_id_Input = TypedDict(
    '_UserWhereUnique_stripe_customer_id_Input',
    {
        'stripe_customer_id': '_str',
    },
    total=True
)

_UserWhereUnique_stripe_subscription_id_Input = TypedDict(
    '_UserWhereUnique_stripe_subscription_id_Input',
    {
        'stripe_subscription_id': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_stripe_customer_id_Input',
    '_UserWhereUnique_stripe_subscription_id_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    bio: Optional[_str]
    email: Optional[_str]
    location: Optional[_str]
    createdAt: datetime.datetime
    githubLink: Optional[_str]
    linkedinLink: Optional[_str]
    twitterLink: Optional[_str]
    bioCompletions: Union[AtomicIntInput, _int]
    lastBioReset: Optional[datetime.datetime]
    stripe_current_period_end: Optional[datetime.datetime]
    stripe_customer_id: Optional[_str]
    stripe_price_id: Optional[_str]
    stripe_subscription_id: Optional[_str]
    isSuperUser: _bool
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    name: Optional[_str]
    isOnboard: _bool
    portfolioLink: Optional[_str]
    Account: 'AccountUpdateManyWithoutRelationsInput'
    Company: 'CompanyUpdateOneWithoutRelationsInput'
    JobApplication: 'JobApplicationUpdateManyWithoutRelationsInput'
    JobTracker: 'JobTrackerUpdateManyWithoutRelationsInput'
    Session: 'SessionUpdateManyWithoutRelationsInput'
    UploadedCv: 'UploadedCvUpdateOneWithoutRelationsInput'
    WorkExperience: 'WorkExperienceUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    bio: Optional[_str]
    email: Optional[_str]
    location: Optional[_str]
    createdAt: datetime.datetime
    githubLink: Optional[_str]
    linkedinLink: Optional[_str]
    twitterLink: Optional[_str]
    bioCompletions: Union[AtomicIntInput, _int]
    lastBioReset: Optional[datetime.datetime]
    stripe_current_period_end: Optional[datetime.datetime]
    stripe_customer_id: Optional[_str]
    stripe_price_id: Optional[_str]
    stripe_subscription_id: Optional[_str]
    isSuperUser: _bool
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    name: Optional[_str]
    isOnboard: _bool
    portfolioLink: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_lastName_OrderByInput = TypedDict(
    '_User_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_User_dateOfBirth_OrderByInput = TypedDict(
    '_User_dateOfBirth_OrderByInput',
    {
        'dateOfBirth': 'SortOrder',
    },
    total=True
)

_User_bio_OrderByInput = TypedDict(
    '_User_bio_OrderByInput',
    {
        'bio': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_location_OrderByInput = TypedDict(
    '_User_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_githubLink_OrderByInput = TypedDict(
    '_User_githubLink_OrderByInput',
    {
        'githubLink': 'SortOrder',
    },
    total=True
)

_User_linkedinLink_OrderByInput = TypedDict(
    '_User_linkedinLink_OrderByInput',
    {
        'linkedinLink': 'SortOrder',
    },
    total=True
)

_User_twitterLink_OrderByInput = TypedDict(
    '_User_twitterLink_OrderByInput',
    {
        'twitterLink': 'SortOrder',
    },
    total=True
)

_User_bioCompletions_OrderByInput = TypedDict(
    '_User_bioCompletions_OrderByInput',
    {
        'bioCompletions': 'SortOrder',
    },
    total=True
)

_User_lastBioReset_OrderByInput = TypedDict(
    '_User_lastBioReset_OrderByInput',
    {
        'lastBioReset': 'SortOrder',
    },
    total=True
)

_User_stripe_current_period_end_OrderByInput = TypedDict(
    '_User_stripe_current_period_end_OrderByInput',
    {
        'stripe_current_period_end': 'SortOrder',
    },
    total=True
)

_User_stripe_customer_id_OrderByInput = TypedDict(
    '_User_stripe_customer_id_OrderByInput',
    {
        'stripe_customer_id': 'SortOrder',
    },
    total=True
)

_User_stripe_price_id_OrderByInput = TypedDict(
    '_User_stripe_price_id_OrderByInput',
    {
        'stripe_price_id': 'SortOrder',
    },
    total=True
)

_User_stripe_subscription_id_OrderByInput = TypedDict(
    '_User_stripe_subscription_id_OrderByInput',
    {
        'stripe_subscription_id': 'SortOrder',
    },
    total=True
)

_User_isSuperUser_OrderByInput = TypedDict(
    '_User_isSuperUser_OrderByInput',
    {
        'isSuperUser': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_isOnboard_OrderByInput = TypedDict(
    '_User_isOnboard_OrderByInput',
    {
        'isOnboard': 'SortOrder',
    },
    total=True
)

_User_portfolioLink_OrderByInput = TypedDict(
    '_User_portfolioLink_OrderByInput',
    {
        'portfolioLink': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_lastName_OrderByInput',
    '_User_dateOfBirth_OrderByInput',
    '_User_bio_OrderByInput',
    '_User_email_OrderByInput',
    '_User_location_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_githubLink_OrderByInput',
    '_User_linkedinLink_OrderByInput',
    '_User_twitterLink_OrderByInput',
    '_User_bioCompletions_OrderByInput',
    '_User_lastBioReset_OrderByInput',
    '_User_stripe_current_period_end_OrderByInput',
    '_User_stripe_customer_id_OrderByInput',
    '_User_stripe_price_id_OrderByInput',
    '_User_stripe_subscription_id_OrderByInput',
    '_User_isSuperUser_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
    '_User_name_OrderByInput',
    '_User_isOnboard_OrderByInput',
    '_User_portfolioLink_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    Account: Union[bool, 'FindManyAccountArgsFromUser']
    Company: Union[bool, 'CompanyArgsFromUser']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUser']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUser']
    Session: Union[bool, 'FindManySessionArgsFromUser']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUser']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUser']


    

class CompanyIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive1']


class CompanyIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive2']


class CompanyIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive3']


class CompanyIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive4']


class CompanyIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class JobApplicationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class JobApplicationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class JobApplicationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class JobApplicationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class JobApplicationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyJobApplicationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive1']
    Company: Union[bool, 'CompanyArgsFromUserRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromUserRecursive1']


class JobPostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive2']
    Company: Union[bool, 'CompanyArgsFromUserRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromUserRecursive2']


class JobPostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive3']
    Company: Union[bool, 'CompanyArgsFromUserRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromUserRecursive3']


class JobPostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive4']
    Company: Union[bool, 'CompanyArgsFromUserRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromUserRecursive4']


class JobPostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class JobPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyJobPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class JobTrackerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class JobTrackerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class JobTrackerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'JobPostArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class JobTrackerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class JobTrackerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyJobTrackerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive1']


class TagIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive2']


class TagIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive3']


class TagIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromUserRecursive4']


class TagIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class UploadedCvIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class UploadedCvIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class UploadedCvIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class UploadedCvIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UploadedCvArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUploadedCvArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Account: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    Company: Union[bool, 'CompanyArgsFromUserRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUserRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Account: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    Company: Union[bool, 'CompanyArgsFromUserRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUserRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Account: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    Company: Union[bool, 'CompanyArgsFromUserRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUserRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Account: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    Company: Union[bool, 'CompanyArgsFromUserRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromUserRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromUserRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromUserRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class WorkExperienceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class WorkExperienceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class WorkExperienceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class WorkExperienceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class WorkExperienceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyWorkExperienceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    bio: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    githubLink: Union[None, _str, 'types.StringFilter']
    linkedinLink: Union[None, _str, 'types.StringFilter']
    twitterLink: Union[None, _str, 'types.StringFilter']
    bioCompletions: Union[_int, 'types.IntFilter']
    lastBioReset: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_current_period_end: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_customer_id: Union[None, _str, 'types.StringFilter']
    stripe_price_id: Union[None, _str, 'types.StringFilter']
    stripe_subscription_id: Union[None, _str, 'types.StringFilter']
    isSuperUser: Union[_bool, 'types.BooleanFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    isOnboard: Union[_bool, 'types.BooleanFilter']
    portfolioLink: Union[None, _str, 'types.StringFilter']
    Account: 'AccountListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobApplication: 'JobApplicationListRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Session: 'SessionListRelationFilter'
    UploadedCv: 'UploadedCvRelationFilter'
    WorkExperience: 'WorkExperienceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    bio: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    githubLink: Union[None, _str, 'types.StringFilter']
    linkedinLink: Union[None, _str, 'types.StringFilter']
    twitterLink: Union[None, _str, 'types.StringFilter']
    bioCompletions: Union[_int, 'types.IntFilter']
    lastBioReset: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_current_period_end: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_customer_id: Union[None, _str, 'types.StringFilter']
    stripe_price_id: Union[None, _str, 'types.StringFilter']
    stripe_subscription_id: Union[None, _str, 'types.StringFilter']
    isSuperUser: Union[_bool, 'types.BooleanFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    isOnboard: Union[_bool, 'types.BooleanFilter']
    portfolioLink: Union[None, _str, 'types.StringFilter']
    Account: 'AccountListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobApplication: 'JobApplicationListRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Session: 'SessionListRelationFilter'
    UploadedCv: 'UploadedCvRelationFilter'
    WorkExperience: 'WorkExperienceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    bio: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    githubLink: Union[None, _str, 'types.StringFilter']
    linkedinLink: Union[None, _str, 'types.StringFilter']
    twitterLink: Union[None, _str, 'types.StringFilter']
    bioCompletions: Union[_int, 'types.IntFilter']
    lastBioReset: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_current_period_end: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_customer_id: Union[None, _str, 'types.StringFilter']
    stripe_price_id: Union[None, _str, 'types.StringFilter']
    stripe_subscription_id: Union[None, _str, 'types.StringFilter']
    isSuperUser: Union[_bool, 'types.BooleanFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    isOnboard: Union[_bool, 'types.BooleanFilter']
    portfolioLink: Union[None, _str, 'types.StringFilter']
    Account: 'AccountListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobApplication: 'JobApplicationListRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Session: 'SessionListRelationFilter'
    UploadedCv: 'UploadedCvRelationFilter'
    WorkExperience: 'WorkExperienceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    bio: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    githubLink: Union[None, _str, 'types.StringFilter']
    linkedinLink: Union[None, _str, 'types.StringFilter']
    twitterLink: Union[None, _str, 'types.StringFilter']
    bioCompletions: Union[_int, 'types.IntFilter']
    lastBioReset: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_current_period_end: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_customer_id: Union[None, _str, 'types.StringFilter']
    stripe_price_id: Union[None, _str, 'types.StringFilter']
    stripe_subscription_id: Union[None, _str, 'types.StringFilter']
    isSuperUser: Union[_bool, 'types.BooleanFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    isOnboard: Union[_bool, 'types.BooleanFilter']
    portfolioLink: Union[None, _str, 'types.StringFilter']
    Account: 'AccountListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobApplication: 'JobApplicationListRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Session: 'SessionListRelationFilter'
    UploadedCv: 'UploadedCvRelationFilter'
    WorkExperience: 'WorkExperienceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    bio: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    githubLink: Union[None, _str, 'types.StringFilter']
    linkedinLink: Union[None, _str, 'types.StringFilter']
    twitterLink: Union[None, _str, 'types.StringFilter']
    bioCompletions: Union[_int, 'types.IntFilter']
    lastBioReset: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_current_period_end: Union[None, datetime.datetime, 'types.DateTimeFilter']
    stripe_customer_id: Union[None, _str, 'types.StringFilter']
    stripe_price_id: Union[None, _str, 'types.StringFilter']
    stripe_subscription_id: Union[None, _str, 'types.StringFilter']
    isSuperUser: Union[_bool, 'types.BooleanFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    isOnboard: Union[_bool, 'types.BooleanFilter']
    portfolioLink: Union[None, _str, 'types.StringFilter']
    Account: 'AccountListRelationFilter'
    Company: 'CompanyRelationFilter'
    JobApplication: 'JobApplicationListRelationFilter'
    JobTracker: 'JobTrackerListRelationFilter'
    Session: 'SessionListRelationFilter'
    UploadedCv: 'UploadedCvRelationFilter'
    WorkExperience: 'WorkExperienceListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    githubLink: Union[_str, 'types.StringWithAggregatesFilter']
    linkedinLink: Union[_str, 'types.StringWithAggregatesFilter']
    twitterLink: Union[_str, 'types.StringWithAggregatesFilter']
    bioCompletions: Union[_int, 'types.IntWithAggregatesFilter']
    lastBioReset: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_current_period_end: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_customer_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_price_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperUser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    isOnboard: Union[_bool, 'types.BooleanWithAggregatesFilter']
    portfolioLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    githubLink: Union[_str, 'types.StringWithAggregatesFilter']
    linkedinLink: Union[_str, 'types.StringWithAggregatesFilter']
    twitterLink: Union[_str, 'types.StringWithAggregatesFilter']
    bioCompletions: Union[_int, 'types.IntWithAggregatesFilter']
    lastBioReset: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_current_period_end: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_customer_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_price_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperUser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    isOnboard: Union[_bool, 'types.BooleanWithAggregatesFilter']
    portfolioLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    githubLink: Union[_str, 'types.StringWithAggregatesFilter']
    linkedinLink: Union[_str, 'types.StringWithAggregatesFilter']
    twitterLink: Union[_str, 'types.StringWithAggregatesFilter']
    bioCompletions: Union[_int, 'types.IntWithAggregatesFilter']
    lastBioReset: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_current_period_end: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_customer_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_price_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperUser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    isOnboard: Union[_bool, 'types.BooleanWithAggregatesFilter']
    portfolioLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    githubLink: Union[_str, 'types.StringWithAggregatesFilter']
    linkedinLink: Union[_str, 'types.StringWithAggregatesFilter']
    twitterLink: Union[_str, 'types.StringWithAggregatesFilter']
    bioCompletions: Union[_int, 'types.IntWithAggregatesFilter']
    lastBioReset: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_current_period_end: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_customer_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_price_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperUser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    isOnboard: Union[_bool, 'types.BooleanWithAggregatesFilter']
    portfolioLink: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    githubLink: Union[_str, 'types.StringWithAggregatesFilter']
    linkedinLink: Union[_str, 'types.StringWithAggregatesFilter']
    twitterLink: Union[_str, 'types.StringWithAggregatesFilter']
    bioCompletions: Union[_int, 'types.IntWithAggregatesFilter']
    lastBioReset: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_current_period_end: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    stripe_customer_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_price_id: Union[_str, 'types.StringWithAggregatesFilter']
    stripe_subscription_id: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperUser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    isOnboard: Union[_bool, 'types.BooleanWithAggregatesFilter']
    portfolioLink: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    firstName: _str
    lastName: _str
    dateOfBirth: datetime.datetime
    bio: _str
    email: _str
    location: _str
    createdAt: datetime.datetime
    githubLink: _str
    linkedinLink: _str
    twitterLink: _str
    bioCompletions: _int
    lastBioReset: datetime.datetime
    stripe_current_period_end: datetime.datetime
    stripe_customer_id: _str
    stripe_price_id: _str
    stripe_subscription_id: _str
    isSuperUser: _bool
    emailVerified: datetime.datetime
    image: _str
    name: _str
    isOnboard: _bool
    portfolioLink: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    bioCompletions: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    bioCompletions: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    firstName: _str
    lastName: _str
    dateOfBirth: datetime.datetime
    bio: _str
    email: _str
    location: _str
    createdAt: datetime.datetime
    githubLink: _str
    linkedinLink: _str
    twitterLink: _str
    bioCompletions: _int
    lastBioReset: datetime.datetime
    stripe_current_period_end: datetime.datetime
    stripe_customer_id: _str
    stripe_price_id: _str
    stripe_subscription_id: _str
    isSuperUser: _bool
    emailVerified: datetime.datetime
    image: _str
    name: _str
    isOnboard: _bool
    portfolioLink: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    firstName: bool
    lastName: bool
    dateOfBirth: bool
    bio: bool
    email: bool
    location: bool
    createdAt: bool
    githubLink: bool
    linkedinLink: bool
    twitterLink: bool
    bioCompletions: bool
    lastBioReset: bool
    stripe_current_period_end: bool
    stripe_customer_id: bool
    stripe_price_id: bool
    stripe_subscription_id: bool
    isSuperUser: bool
    emailVerified: bool
    image: bool
    name: bool
    isOnboard: bool
    portfolioLink: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    firstName: bool
    lastName: bool
    dateOfBirth: bool
    bio: bool
    email: bool
    location: bool
    createdAt: bool
    githubLink: bool
    linkedinLink: bool
    twitterLink: bool
    bioCompletions: bool
    lastBioReset: bool
    stripe_current_period_end: bool
    stripe_customer_id: bool
    stripe_price_id: bool
    stripe_subscription_id: bool
    isSuperUser: bool
    emailVerified: bool
    image: bool
    name: bool
    isOnboard: bool
    portfolioLink: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    bioCompletions: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'firstName': bool,
        'lastName': bool,
        'dateOfBirth': bool,
        'bio': bool,
        'email': bool,
        'location': bool,
        'createdAt': bool,
        'githubLink': bool,
        'linkedinLink': bool,
        'twitterLink': bool,
        'bioCompletions': bool,
        'lastBioReset': bool,
        'stripe_current_period_end': bool,
        'stripe_customer_id': bool,
        'stripe_price_id': bool,
        'stripe_subscription_id': bool,
        'isSuperUser': bool,
        'emailVerified': bool,
        'image': bool,
        'name': bool,
        'isOnboard': bool,
        'portfolioLink': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'firstName': int,
        'lastName': int,
        'dateOfBirth': int,
        'bio': int,
        'email': int,
        'location': int,
        'createdAt': int,
        'githubLink': int,
        'linkedinLink': int,
        'twitterLink': int,
        'bioCompletions': int,
        'lastBioReset': int,
        'stripe_current_period_end': int,
        'stripe_customer_id': int,
        'stripe_price_id': int,
        'stripe_subscription_id': int,
        'isSuperUser': int,
        'emailVerified': int,
        'image': int,
        'name': int,
        'isOnboard': int,
        'portfolioLink': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'dateOfBirth',
    'bio',
    'email',
    'location',
    'createdAt',
    'githubLink',
    'linkedinLink',
    'twitterLink',
    'bioCompletions',
    'lastBioReset',
    'stripe_current_period_end',
    'stripe_customer_id',
    'stripe_price_id',
    'stripe_subscription_id',
    'isSuperUser',
    'emailVerified',
    'image',
    'name',
    'isOnboard',
    'portfolioLink',
    'Account',
    'Company',
    'JobApplication',
    'JobTracker',
    'Session',
    'UploadedCv',
    'WorkExperience',
]
UserScalarFieldKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'dateOfBirth',
    'bio',
    'email',
    'location',
    'createdAt',
    'githubLink',
    'linkedinLink',
    'twitterLink',
    'bioCompletions',
    'lastBioReset',
    'stripe_current_period_end',
    'stripe_customer_id',
    'stripe_price_id',
    'stripe_subscription_id',
    'isSuperUser',
    'emailVerified',
    'image',
    'name',
    'isOnboard',
    'portfolioLink',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'Account',
        'Company',
        'JobApplication',
        'JobTracker',
        'Session',
        'UploadedCv',
        'WorkExperience',
    ]

# WorkExperience types

class WorkExperienceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WorkExperience create method"""
    id: _int
    userId: _str
    location: Optional[_str]
    endDate: Optional[datetime.datetime]
    description: Optional[_str]
    createdAt: datetime.datetime
    User: 'UserCreateNestedWithoutRelationsInput'


class WorkExperienceCreateInput(WorkExperienceOptionalCreateInput):
    """Required arguments to the WorkExperience create method"""
    title: _str
    company: _str
    startDate: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WorkExperienceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WorkExperience create method, without relations"""
    id: _int
    userId: _str
    location: Optional[_str]
    endDate: Optional[datetime.datetime]
    description: Optional[_str]
    createdAt: datetime.datetime


class WorkExperienceCreateWithoutRelationsInput(WorkExperienceOptionalCreateWithoutRelationsInput):
    """Required arguments to the WorkExperience create method, without relations"""
    title: _str
    company: _str
    startDate: datetime.datetime
    updatedAt: datetime.datetime


class WorkExperienceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WorkExperienceCreateWithoutRelationsInput'
    connect: 'WorkExperienceWhereUniqueInput'


class WorkExperienceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WorkExperienceCreateWithoutRelationsInput', List['WorkExperienceCreateWithoutRelationsInput']]
    connect: Union['WorkExperienceWhereUniqueInput', List['WorkExperienceWhereUniqueInput']]


_WorkExperienceWhereUnique_id_Input = TypedDict(
    '_WorkExperienceWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

WorkExperienceWhereUniqueInput = _WorkExperienceWhereUnique_id_Input


class WorkExperienceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    company: _str
    location: Optional[_str]
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    User: 'UserUpdateOneWithoutRelationsInput'


class WorkExperienceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    company: _str
    location: Optional[_str]
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class WorkExperienceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WorkExperienceCreateWithoutRelationsInput']
    connect: List['WorkExperienceWhereUniqueInput']
    set: List['WorkExperienceWhereUniqueInput']
    disconnect: List['WorkExperienceWhereUniqueInput']
    delete: List['WorkExperienceWhereUniqueInput']

    # TODO
    # update: List['WorkExperienceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WorkExperienceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WorkExperienceScalarWhereInput']
    # upsert: List['WorkExperienceUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['WorkExperienceCreateOrConnectWithoutRelationsInput']


class WorkExperienceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WorkExperienceCreateWithoutRelationsInput'
    connect: 'WorkExperienceWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WorkExperienceUpdateInput'
    # upsert: 'WorkExperienceUpsertWithoutRelationsInput'
    # connectOrCreate: 'WorkExperienceCreateOrConnectWithoutRelationsInput'


class WorkExperienceUpsertInput(TypedDict):
    create: 'WorkExperienceCreateInput'
    update: 'WorkExperienceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WorkExperience_id_OrderByInput = TypedDict(
    '_WorkExperience_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_WorkExperience_userId_OrderByInput = TypedDict(
    '_WorkExperience_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_WorkExperience_title_OrderByInput = TypedDict(
    '_WorkExperience_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_WorkExperience_company_OrderByInput = TypedDict(
    '_WorkExperience_company_OrderByInput',
    {
        'company': 'SortOrder',
    },
    total=True
)

_WorkExperience_location_OrderByInput = TypedDict(
    '_WorkExperience_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_WorkExperience_startDate_OrderByInput = TypedDict(
    '_WorkExperience_startDate_OrderByInput',
    {
        'startDate': 'SortOrder',
    },
    total=True
)

_WorkExperience_endDate_OrderByInput = TypedDict(
    '_WorkExperience_endDate_OrderByInput',
    {
        'endDate': 'SortOrder',
    },
    total=True
)

_WorkExperience_description_OrderByInput = TypedDict(
    '_WorkExperience_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_WorkExperience_createdAt_OrderByInput = TypedDict(
    '_WorkExperience_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_WorkExperience_updatedAt_OrderByInput = TypedDict(
    '_WorkExperience_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

WorkExperienceOrderByInput = Union[
    '_WorkExperience_id_OrderByInput',
    '_WorkExperience_userId_OrderByInput',
    '_WorkExperience_title_OrderByInput',
    '_WorkExperience_company_OrderByInput',
    '_WorkExperience_location_OrderByInput',
    '_WorkExperience_startDate_OrderByInput',
    '_WorkExperience_endDate_OrderByInput',
    '_WorkExperience_description_OrderByInput',
    '_WorkExperience_createdAt_OrderByInput',
    '_WorkExperience_updatedAt_OrderByInput',
]



# recursive WorkExperience types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WorkExperienceRelationFilter = TypedDict(
    'WorkExperienceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WorkExperienceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WorkExperienceInclude(TypedDict, total=False):
    """WorkExperience relational arguments"""
    User: Union[bool, 'UserArgsFromWorkExperience']


    

class CompanyIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive1']


class CompanyIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive2']


class CompanyIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive3']


class CompanyIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive4']


class CompanyIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class CompanyArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyCompanyArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive1']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class JobApplicationIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive2']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class JobApplicationIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive3']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class JobApplicationIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive4']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class JobApplicationIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class JobApplicationArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyJobApplicationArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive1']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromWorkExperienceRecursive1']


class JobPostIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive2']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromWorkExperienceRecursive2']


class JobPostIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive3']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromWorkExperienceRecursive3']


class JobPostIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive4']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromWorkExperienceRecursive4']


class JobPostIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class JobPostArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyJobPostArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive1']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class JobTrackerIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive2']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class JobTrackerIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive3']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class JobTrackerIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'JobPostArgsFromWorkExperienceRecursive4']
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class JobTrackerIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class JobTrackerArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyJobTrackerArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive1']


class TagIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive2']


class TagIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive3']


class TagIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromWorkExperienceRecursive4']


class TagIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class TagArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyTagArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class UploadedCvIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class UploadedCvIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class UploadedCvIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class UploadedCvIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class UploadedCvArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyUploadedCvArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    Account: Union[bool, 'FindManyAccountArgsFromWorkExperienceRecursive1']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromWorkExperienceRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromWorkExperienceRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromWorkExperienceRecursive1']


class UserIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    Account: Union[bool, 'FindManyAccountArgsFromWorkExperienceRecursive2']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromWorkExperienceRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromWorkExperienceRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromWorkExperienceRecursive2']


class UserIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    Account: Union[bool, 'FindManyAccountArgsFromWorkExperienceRecursive3']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromWorkExperienceRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromWorkExperienceRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromWorkExperienceRecursive3']


class UserIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    Account: Union[bool, 'FindManyAccountArgsFromWorkExperienceRecursive4']
    Company: Union[bool, 'CompanyArgsFromWorkExperienceRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromWorkExperienceRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromWorkExperienceRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromWorkExperienceRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromWorkExperienceRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromWorkExperienceRecursive4']


class UserIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class UserArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyUserArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class WorkExperienceIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class WorkExperienceIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class WorkExperienceIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class WorkExperienceIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class WorkExperienceArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyWorkExperienceArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class AccountIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class AccountIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class AccountIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class AccountIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class AccountArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyAccountArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive1']


class SessionIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive2']


class SessionIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive3']


class SessionIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""
    User: Union[bool, 'UserArgsFromWorkExperienceRecursive4']


class SessionIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class SessionArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManySessionArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromWorkExperience(TypedDict, total=False):
    """Relational arguments for WorkExperience"""


class VerificationTokenIncludeFromWorkExperienceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkExperience"""


class VerificationTokenIncludeFromWorkExperienceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkExperience"""


class VerificationTokenIncludeFromWorkExperienceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkExperience"""


class VerificationTokenIncludeFromWorkExperienceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkExperience"""

    

class VerificationTokenArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    
    

class FindManyVerificationTokenArgsFromWorkExperience(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromWorkExperienceRecursive1(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromWorkExperienceRecursive2(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromWorkExperienceRecursive3(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromWorkExperienceRecursive4(TypedDict, total=False):
    """Arguments for WorkExperience"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyWorkExperienceArgs = FindManyWorkExperienceArgsFromWorkExperience
FindFirstWorkExperienceArgs = FindManyWorkExperienceArgsFromWorkExperience


    

class WorkExperienceWhereInput(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkExperienceWhereInputRecursive1', List['WorkExperienceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WorkExperienceWhereInputRecursive1']
    OR: List['WorkExperienceWhereInputRecursive1']
    NOT: List['WorkExperienceWhereInputRecursive1']


class WorkExperienceWhereInputRecursive1(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkExperienceWhereInputRecursive2', List['WorkExperienceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WorkExperienceWhereInputRecursive2']
    OR: List['WorkExperienceWhereInputRecursive2']
    NOT: List['WorkExperienceWhereInputRecursive2']


class WorkExperienceWhereInputRecursive2(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkExperienceWhereInputRecursive3', List['WorkExperienceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['WorkExperienceWhereInputRecursive3']
    OR: List['WorkExperienceWhereInputRecursive3']
    NOT: List['WorkExperienceWhereInputRecursive3']


class WorkExperienceWhereInputRecursive3(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkExperienceWhereInputRecursive4', List['WorkExperienceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['WorkExperienceWhereInputRecursive4']
    OR: List['WorkExperienceWhereInputRecursive4']
    NOT: List['WorkExperienceWhereInputRecursive4']


class WorkExperienceWhereInputRecursive4(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    company: Union[_str, 'types.StringFilter']
    location: Union[None, _str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'



# aggregate WorkExperience types


    

class WorkExperienceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WorkExperienceScalarWhereWithAggregatesInputRecursive1']
    OR: List['WorkExperienceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WorkExperienceScalarWhereWithAggregatesInputRecursive1']


class WorkExperienceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WorkExperienceScalarWhereWithAggregatesInputRecursive2']
    OR: List['WorkExperienceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WorkExperienceScalarWhereWithAggregatesInputRecursive2']


class WorkExperienceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WorkExperienceScalarWhereWithAggregatesInputRecursive3']
    OR: List['WorkExperienceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['WorkExperienceScalarWhereWithAggregatesInputRecursive3']


class WorkExperienceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WorkExperienceScalarWhereWithAggregatesInputRecursive4']
    OR: List['WorkExperienceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['WorkExperienceScalarWhereWithAggregatesInputRecursive4']


class WorkExperienceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """WorkExperience arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class WorkExperienceGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _str
    title: _str
    company: _str
    location: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'WorkExperienceSumAggregateOutput'
    _avg: 'WorkExperienceAvgAggregateOutput'
    _min: 'WorkExperienceMinAggregateOutput'
    _max: 'WorkExperienceMaxAggregateOutput'
    _count: 'WorkExperienceCountAggregateOutput'


class WorkExperienceAvgAggregateOutput(TypedDict, total=False):
    """WorkExperience output for aggregating averages"""
    id: float


class WorkExperienceSumAggregateOutput(TypedDict, total=False):
    """WorkExperience output for aggregating sums"""
    id: _int


class WorkExperienceScalarAggregateOutput(TypedDict, total=False):
    """WorkExperience output including scalar fields"""
    id: _int
    userId: _str
    title: _str
    company: _str
    location: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


WorkExperienceMinAggregateOutput = WorkExperienceScalarAggregateOutput
WorkExperienceMaxAggregateOutput = WorkExperienceScalarAggregateOutput


class WorkExperienceMaxAggregateInput(TypedDict, total=False):
    """WorkExperience input for aggregating by max"""
    id: bool
    userId: bool
    title: bool
    company: bool
    location: bool
    startDate: bool
    endDate: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class WorkExperienceMinAggregateInput(TypedDict, total=False):
    """WorkExperience input for aggregating by min"""
    id: bool
    userId: bool
    title: bool
    company: bool
    location: bool
    startDate: bool
    endDate: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class WorkExperienceNumberAggregateInput(TypedDict, total=False):
    """WorkExperience input for aggregating numbers"""
    id: bool


WorkExperienceAvgAggregateInput = WorkExperienceNumberAggregateInput
WorkExperienceSumAggregateInput = WorkExperienceNumberAggregateInput


WorkExperienceCountAggregateInput = TypedDict(
    'WorkExperienceCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'title': bool,
        'company': bool,
        'location': bool,
        'startDate': bool,
        'endDate': bool,
        'description': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

WorkExperienceCountAggregateOutput = TypedDict(
    'WorkExperienceCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'title': int,
        'company': int,
        'location': int,
        'startDate': int,
        'endDate': int,
        'description': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


WorkExperienceKeys = Literal[
    'id',
    'userId',
    'title',
    'company',
    'location',
    'startDate',
    'endDate',
    'description',
    'createdAt',
    'updatedAt',
    'User',
]
WorkExperienceScalarFieldKeys = Literal[
    'id',
    'userId',
    'title',
    'company',
    'location',
    'startDate',
    'endDate',
    'description',
    'createdAt',
    'updatedAt',
]
WorkExperienceScalarFieldKeysT = TypeVar('WorkExperienceScalarFieldKeysT', bound=WorkExperienceScalarFieldKeys)

WorkExperienceRelationalFieldKeys = Literal[
        'User',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    User: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str


class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]


_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    User: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AccountCreateOrConnectWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'
    # connectOrCreate: 'AccountCreateOrConnectWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    User: Union[bool, 'UserArgsFromAccount']


    

class CompanyIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive1']


class CompanyIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive2']


class CompanyIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive3']


class CompanyIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive4']


class CompanyIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class CompanyArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyCompanyArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive1']
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class JobApplicationIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive2']
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class JobApplicationIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive3']
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class JobApplicationIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive4']
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class JobApplicationIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class JobApplicationArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyJobApplicationArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive1']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromAccountRecursive1']


class JobPostIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive2']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromAccountRecursive2']


class JobPostIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive3']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromAccountRecursive3']


class JobPostIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive4']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromAccountRecursive4']


class JobPostIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class JobPostArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyJobPostArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive1']
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class JobTrackerIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive2']
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class JobTrackerIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive3']
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class JobTrackerIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'JobPostArgsFromAccountRecursive4']
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class JobTrackerIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class JobTrackerArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyJobTrackerArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive1']


class TagIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive2']


class TagIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive3']


class TagIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromAccountRecursive4']


class TagIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class TagArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyTagArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class UploadedCvIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class UploadedCvIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class UploadedCvIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class UploadedCvIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UploadedCvArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUploadedCvArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    Account: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromAccountRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    Account: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromAccountRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    Account: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromAccountRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    Account: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    Company: Union[bool, 'CompanyArgsFromAccountRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromAccountRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromAccountRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromAccountRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class WorkExperienceIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class WorkExperienceIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class WorkExperienceIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class WorkExperienceIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class WorkExperienceArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyWorkExperienceArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    User: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    User: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'User',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'User',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    userId: _str
    User: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]


_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    User: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SessionCreateOrConnectWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'
    # connectOrCreate: 'SessionCreateOrConnectWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    User: Union[bool, 'UserArgsFromSession']


    

class CompanyIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive1']


class CompanyIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive2']


class CompanyIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive3']


class CompanyIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive4']


class CompanyIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CompanyArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCompanyArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive1']
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class JobApplicationIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive2']
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class JobApplicationIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive3']
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class JobApplicationIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive4']
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class JobApplicationIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class JobApplicationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyJobApplicationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive1']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromSessionRecursive1']


class JobPostIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive2']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromSessionRecursive2']


class JobPostIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive3']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromSessionRecursive3']


class JobPostIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive4']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromSessionRecursive4']


class JobPostIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class JobPostArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyJobPostArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive1']
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class JobTrackerIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive2']
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class JobTrackerIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive3']
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class JobTrackerIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'JobPostArgsFromSessionRecursive4']
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class JobTrackerIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class JobTrackerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyJobTrackerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive1']


class TagIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive2']


class TagIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive3']


class TagIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromSessionRecursive4']


class TagIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class TagArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyTagArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class UploadedCvIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class UploadedCvIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class UploadedCvIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class UploadedCvIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UploadedCvArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUploadedCvArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    Account: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromSessionRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    Account: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromSessionRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    Account: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromSessionRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    Account: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    Company: Union[bool, 'CompanyArgsFromSessionRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromSessionRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromSessionRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromSessionRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class WorkExperienceIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class WorkExperienceIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class WorkExperienceIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class WorkExperienceIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class WorkExperienceArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyWorkExperienceArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    User: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    User: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'User',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'User',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    identifier: _str
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]


_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKeyInner = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKeyInner',
    {
        'identifier': '_str',
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKey = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKey',
    {
        'identifier_token': '_VerificationTokenCompoundidentifier_tokenKeyInner',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_token_Input',
    '_VerificationTokenCompoundidentifier_tokenKey',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['VerificationTokenCreateOrConnectWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'
    # connectOrCreate: 'VerificationTokenCreateOrConnectWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_identifier_OrderByInput = TypedDict(
    '_VerificationToken_identifier_OrderByInput',
    {
        'identifier': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_OrderByInput = TypedDict(
    '_VerificationToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_identifier_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_expires_OrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""


    

class CompanyIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive1']


class CompanyIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive2']


class CompanyIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive3']


class CompanyIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive4']


class CompanyIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class CompanyArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyCompanyArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class JobApplicationIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive1']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class JobApplicationIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive2']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class JobApplicationIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive3']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class JobApplicationIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive4']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class JobApplicationIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class JobApplicationArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class JobApplicationArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class JobApplicationArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class JobApplicationArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class JobApplicationArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyJobApplicationArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive1'


class FindManyJobApplicationArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive2'


class FindManyJobApplicationArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive3'


class FindManyJobApplicationArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    include: 'JobApplicationIncludeFromJobApplicationRecursive4'


class FindManyJobApplicationArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobApplicationOrderByInput', List['JobApplicationOrderByInput']]
    where: 'JobApplicationWhereInput'
    cursor: 'JobApplicationWhereUniqueInput'
    distinct: List['JobApplicationScalarFieldKeys']
    
    

class JobPostIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive1']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive1']
    Tag: Union[bool, 'FindManyTagArgsFromVerificationTokenRecursive1']


class JobPostIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive2']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive2']
    Tag: Union[bool, 'FindManyTagArgsFromVerificationTokenRecursive2']


class JobPostIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive3']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive3']
    Tag: Union[bool, 'FindManyTagArgsFromVerificationTokenRecursive3']


class JobPostIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive4']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive4']
    Tag: Union[bool, 'FindManyTagArgsFromVerificationTokenRecursive4']


class JobPostIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class JobPostArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobPostIncludeFromJobPostRecursive1'


class JobPostArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobPostIncludeFromJobPostRecursive2'


class JobPostArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobPostIncludeFromJobPostRecursive3'


class JobPostArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobPostIncludeFromJobPostRecursive4'


class JobPostArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyJobPostArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive1'


class FindManyJobPostArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive2'


class FindManyJobPostArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive3'


class FindManyJobPostArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    include: 'JobPostIncludeFromJobPostRecursive4'


class FindManyJobPostArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobPostOrderByInput', List['JobPostOrderByInput']]
    where: 'JobPostWhereInput'
    cursor: 'JobPostWhereUniqueInput'
    distinct: List['JobPostScalarFieldKeys']
    
    

class JobTrackerIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive1']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class JobTrackerIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive2']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class JobTrackerIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive3']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class JobTrackerIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'JobPostArgsFromVerificationTokenRecursive4']
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class JobTrackerIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class JobTrackerArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class JobTrackerArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class JobTrackerArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class JobTrackerArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class JobTrackerArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyJobTrackerArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive1'


class FindManyJobTrackerArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive2'


class FindManyJobTrackerArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive3'


class FindManyJobTrackerArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    include: 'JobTrackerIncludeFromJobTrackerRecursive4'


class FindManyJobTrackerArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['JobTrackerOrderByInput', List['JobTrackerOrderByInput']]
    where: 'JobTrackerWhereInput'
    cursor: 'JobTrackerWhereUniqueInput'
    distinct: List['JobTrackerScalarFieldKeys']
    
    

class TagIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive1']


class TagIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive2']


class TagIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive3']


class TagIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    JobPost: Union[bool, 'FindManyJobPostArgsFromVerificationTokenRecursive4']


class TagIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class TagArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyTagArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class UploadedCvIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class UploadedCvIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class UploadedCvIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class UploadedCvIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class UploadedCvIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UploadedCvArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class UploadedCvArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class UploadedCvArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class UploadedCvArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class UploadedCvArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUploadedCvArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive1'


class FindManyUploadedCvArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive2'


class FindManyUploadedCvArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive3'


class FindManyUploadedCvArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    include: 'UploadedCvIncludeFromUploadedCvRecursive4'


class FindManyUploadedCvArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UploadedCvOrderByInput', List['UploadedCvOrderByInput']]
    where: 'UploadedCvWhereInput'
    cursor: 'UploadedCvWhereUniqueInput'
    distinct: List['UploadedCvScalarFieldKeys']
    
    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    Account: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive1']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive1']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive1']
    Session: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    UploadedCv: Union[bool, 'UploadedCvArgsFromVerificationTokenRecursive1']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    Account: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive2']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive2']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive2']
    Session: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    UploadedCv: Union[bool, 'UploadedCvArgsFromVerificationTokenRecursive2']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    Account: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive3']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive3']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive3']
    Session: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    UploadedCv: Union[bool, 'UploadedCvArgsFromVerificationTokenRecursive3']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    Account: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    Company: Union[bool, 'CompanyArgsFromVerificationTokenRecursive4']
    JobApplication: Union[bool, 'FindManyJobApplicationArgsFromVerificationTokenRecursive4']
    JobTracker: Union[bool, 'FindManyJobTrackerArgsFromVerificationTokenRecursive4']
    Session: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    UploadedCv: Union[bool, 'UploadedCvArgsFromVerificationTokenRecursive4']
    WorkExperience: Union[bool, 'FindManyWorkExperienceArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class WorkExperienceIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class WorkExperienceIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class WorkExperienceIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class WorkExperienceIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class WorkExperienceIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class WorkExperienceArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class WorkExperienceArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class WorkExperienceArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class WorkExperienceArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class WorkExperienceArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyWorkExperienceArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive1'


class FindManyWorkExperienceArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive2'


class FindManyWorkExperienceArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive3'


class FindManyWorkExperienceArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    include: 'WorkExperienceIncludeFromWorkExperienceRecursive4'


class FindManyWorkExperienceArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['WorkExperienceOrderByInput', List['WorkExperienceOrderByInput']]
    where: 'WorkExperienceWhereInput'
    cursor: 'WorkExperienceWhereUniqueInput'
    distinct: List['WorkExperienceScalarFieldKeys']
    
    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    User: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    identifier: _str
    token: _str
    expires: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    identifier: _str
    token: _str
    expires: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'identifier': bool,
        'token': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'identifier': int,
        'token': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields